// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/lrstanley/entrest/_examples/kitchensink/internal/database/ent/follows"
	"github.com/lrstanley/entrest/_examples/kitchensink/internal/database/ent/pet"
	"github.com/lrstanley/entrest/_examples/kitchensink/internal/database/ent/user"
)

// Follows is the model entity for the Follows schema.
type Follows struct {
	config `json:"-"`
	// FollowedAt holds the value of the "followed_at" field.
	FollowedAt time.Time `json:"followed_at"`
	// UserID holds the value of the "user_id" field.
	UserID uuid.UUID `json:"user_id"`
	// PetID holds the value of the "pet_id" field.
	PetID int `json:"pet_id"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the FollowsQuery when eager-loading is set.
	Edges        FollowsEdges `json:"edges"`
	selectValues sql.SelectValues
}

// FollowsEdges holds the relations/edges for other nodes in the graph.
type FollowsEdges struct {
	// The user that is following the pet.
	User *User `json:"user,omitempty"`
	// The pet that is being followed by the user.
	Pet *Pet `json:"pet,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e FollowsEdges) UserOrErr() (*User, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// PetOrErr returns the Pet value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e FollowsEdges) PetOrErr() (*Pet, error) {
	if e.Pet != nil {
		return e.Pet, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: pet.Label}
	}
	return nil, &NotLoadedError{edge: "pet"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Follows) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case follows.FieldPetID:
			values[i] = new(sql.NullInt64)
		case follows.FieldFollowedAt:
			values[i] = new(sql.NullTime)
		case follows.FieldUserID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Follows fields.
func (f *Follows) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case follows.FieldFollowedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field followed_at", values[i])
			} else if value.Valid {
				f.FollowedAt = value.Time
			}
		case follows.FieldUserID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value != nil {
				f.UserID = *value
			}
		case follows.FieldPetID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field pet_id", values[i])
			} else if value.Valid {
				f.PetID = int(value.Int64)
			}
		default:
			f.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Follows.
// This includes values selected through modifiers, order, etc.
func (f *Follows) Value(name string) (ent.Value, error) {
	return f.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the Follows entity.
func (f *Follows) QueryUser() *UserQuery {
	return NewFollowsClient(f.config).QueryUser(f)
}

// QueryPet queries the "pet" edge of the Follows entity.
func (f *Follows) QueryPet() *PetQuery {
	return NewFollowsClient(f.config).QueryPet(f)
}

// Update returns a builder for updating this Follows.
// Note that you need to call Follows.Unwrap() before calling this method if this Follows
// was returned from a transaction, and the transaction was committed or rolled back.
func (f *Follows) Update() *FollowsUpdateOne {
	return NewFollowsClient(f.config).UpdateOne(f)
}

// Unwrap unwraps the Follows entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (f *Follows) Unwrap() *Follows {
	_tx, ok := f.config.driver.(*txDriver)
	if !ok {
		panic("ent: Follows is not a transactional entity")
	}
	f.config.driver = _tx.drv
	return f
}

// String implements the fmt.Stringer.
func (f *Follows) String() string {
	var builder strings.Builder
	builder.WriteString("Follows(")
	builder.WriteString("followed_at=")
	builder.WriteString(f.FollowedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", f.UserID))
	builder.WriteString(", ")
	builder.WriteString("pet_id=")
	builder.WriteString(fmt.Sprintf("%v", f.PetID))
	builder.WriteByte(')')
	return builder.String()
}

// FollowsSlice is a parsable slice of Follows.
type FollowsSlice []*Follows
