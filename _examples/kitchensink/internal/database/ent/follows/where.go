// Code generated by ent, DO NOT EDIT.

package follows

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"github.com/lrstanley/entrest/_examples/kitchensink/internal/database/ent/predicate"
)

// FollowedAt applies equality check predicate on the "followed_at" field. It's identical to FollowedAtEQ.
func FollowedAt(v time.Time) predicate.Follows {
	return predicate.Follows(sql.FieldEQ(FieldFollowedAt, v))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v uuid.UUID) predicate.Follows {
	return predicate.Follows(sql.FieldEQ(FieldUserID, v))
}

// PetID applies equality check predicate on the "pet_id" field. It's identical to PetIDEQ.
func PetID(v int) predicate.Follows {
	return predicate.Follows(sql.FieldEQ(FieldPetID, v))
}

// FollowedAtEQ applies the EQ predicate on the "followed_at" field.
func FollowedAtEQ(v time.Time) predicate.Follows {
	return predicate.Follows(sql.FieldEQ(FieldFollowedAt, v))
}

// FollowedAtNEQ applies the NEQ predicate on the "followed_at" field.
func FollowedAtNEQ(v time.Time) predicate.Follows {
	return predicate.Follows(sql.FieldNEQ(FieldFollowedAt, v))
}

// FollowedAtIn applies the In predicate on the "followed_at" field.
func FollowedAtIn(vs ...time.Time) predicate.Follows {
	return predicate.Follows(sql.FieldIn(FieldFollowedAt, vs...))
}

// FollowedAtNotIn applies the NotIn predicate on the "followed_at" field.
func FollowedAtNotIn(vs ...time.Time) predicate.Follows {
	return predicate.Follows(sql.FieldNotIn(FieldFollowedAt, vs...))
}

// FollowedAtGT applies the GT predicate on the "followed_at" field.
func FollowedAtGT(v time.Time) predicate.Follows {
	return predicate.Follows(sql.FieldGT(FieldFollowedAt, v))
}

// FollowedAtGTE applies the GTE predicate on the "followed_at" field.
func FollowedAtGTE(v time.Time) predicate.Follows {
	return predicate.Follows(sql.FieldGTE(FieldFollowedAt, v))
}

// FollowedAtLT applies the LT predicate on the "followed_at" field.
func FollowedAtLT(v time.Time) predicate.Follows {
	return predicate.Follows(sql.FieldLT(FieldFollowedAt, v))
}

// FollowedAtLTE applies the LTE predicate on the "followed_at" field.
func FollowedAtLTE(v time.Time) predicate.Follows {
	return predicate.Follows(sql.FieldLTE(FieldFollowedAt, v))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v uuid.UUID) predicate.Follows {
	return predicate.Follows(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v uuid.UUID) predicate.Follows {
	return predicate.Follows(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...uuid.UUID) predicate.Follows {
	return predicate.Follows(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...uuid.UUID) predicate.Follows {
	return predicate.Follows(sql.FieldNotIn(FieldUserID, vs...))
}

// PetIDEQ applies the EQ predicate on the "pet_id" field.
func PetIDEQ(v int) predicate.Follows {
	return predicate.Follows(sql.FieldEQ(FieldPetID, v))
}

// PetIDNEQ applies the NEQ predicate on the "pet_id" field.
func PetIDNEQ(v int) predicate.Follows {
	return predicate.Follows(sql.FieldNEQ(FieldPetID, v))
}

// PetIDIn applies the In predicate on the "pet_id" field.
func PetIDIn(vs ...int) predicate.Follows {
	return predicate.Follows(sql.FieldIn(FieldPetID, vs...))
}

// PetIDNotIn applies the NotIn predicate on the "pet_id" field.
func PetIDNotIn(vs ...int) predicate.Follows {
	return predicate.Follows(sql.FieldNotIn(FieldPetID, vs...))
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.Follows {
	return predicate.Follows(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, UserColumn),
			sqlgraph.Edge(sqlgraph.M2O, false, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.Follows {
	return predicate.Follows(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPet applies the HasEdge predicate on the "pet" edge.
func HasPet() predicate.Follows {
	return predicate.Follows(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, PetColumn),
			sqlgraph.Edge(sqlgraph.M2O, false, PetTable, PetColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPetWith applies the HasEdge predicate on the "pet" edge with a given conditions (other predicates).
func HasPetWith(preds ...predicate.Pet) predicate.Follows {
	return predicate.Follows(func(s *sql.Selector) {
		step := newPetStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Follows) predicate.Follows {
	return predicate.Follows(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Follows) predicate.Follows {
	return predicate.Follows(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Follows) predicate.Follows {
	return predicate.Follows(sql.NotPredicates(p))
}
