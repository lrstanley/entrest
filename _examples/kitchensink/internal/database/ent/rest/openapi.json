{
    "openapi": "3.0.3",
    "info": {
        "title": "Kitchen Sink EntGo Rest API",
        "version": "1.0.0"
    },
    "paths": {
        "/categories": {
            "summary": "List categories",
            "description": "List Category entities (including pagination, filtering, sorting, etc). If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -\u003e edge, not entity -\u003e edge -\u003e edge -\u003e etc).",
            "get": {
                "tags": [
                    "Categories"
                ],
                "summary": "List categories",
                "description": "List Category entities (including pagination, filtering, sorting, etc). If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -\u003e edge, not entity -\u003e edge -\u003e edge -\u003e etc).",
                "operationId": "listCategories",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/Page"
                    },
                    {
                        "name": "per_page",
                        "in": "query",
                        "description": "The number of entities to retrieve per page.",
                        "schema": {
                            "type": "integer",
                            "maximum": 100,
                            "minimum": 1,
                            "default": 10
                        }
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Sort entity results by the given field.",
                        "schema": {
                            "$ref": "#/components/schemas/CategorySortableFields",
                            "default": "id"
                        }
                    },
                    {
                        "name": "order",
                        "in": "query",
                        "description": "Order the results in ascending or descending order.",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "asc",
                                "desc"
                            ],
                            "default": "asc"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/FilterOperation"
                    },
                    {
                        "$ref": "#/components/parameters/CategoryIDEQ"
                    },
                    {
                        "$ref": "#/components/parameters/CategoryIDNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/CategoryIDIn"
                    },
                    {
                        "$ref": "#/components/parameters/CategoryIDNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/CategoryCreatedAtGT"
                    },
                    {
                        "$ref": "#/components/parameters/CategoryCreatedAtLT"
                    },
                    {
                        "$ref": "#/components/parameters/CategoryUpdatedAtGT"
                    },
                    {
                        "$ref": "#/components/parameters/CategoryUpdatedAtLT"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The requested Category.",
                        "headers": {
                            "X-Ratelimit-Limit": {
                                "$ref": "#/components/headers/X-Ratelimit-Limit"
                            },
                            "X-Ratelimit-Remaining": {
                                "$ref": "#/components/headers/X-Ratelimit-Remaining"
                            },
                            "X-Ratelimit-Reset": {
                                "$ref": "#/components/headers/X-Ratelimit-Reset"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CategoryList"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/ErrorBadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/ErrorUnauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/ErrorForbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/ErrorNotFound"
                    },
                    "429": {
                        "$ref": "#/components/responses/ErrorTooManyRequests"
                    },
                    "500": {
                        "$ref": "#/components/responses/ErrorInternalServerError"
                    }
                }
            },
            "post": {
                "tags": [
                    "Categories"
                ],
                "summary": "Create a new category",
                "description": "Create a new Category entity. If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -\u003e edge, not entity -\u003e edge -\u003e edge -\u003e etc).",
                "operationId": "createCategory",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CategoryCreate"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "The created Category entity.",
                        "headers": {
                            "X-Ratelimit-Limit": {
                                "$ref": "#/components/headers/X-Ratelimit-Limit"
                            },
                            "X-Ratelimit-Remaining": {
                                "$ref": "#/components/headers/X-Ratelimit-Remaining"
                            },
                            "X-Ratelimit-Reset": {
                                "$ref": "#/components/headers/X-Ratelimit-Reset"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CategoryRead"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/ErrorBadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/ErrorUnauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/ErrorForbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/ErrorNotFound"
                    },
                    "409": {
                        "$ref": "#/components/responses/ErrorConflict"
                    },
                    "429": {
                        "$ref": "#/components/responses/ErrorTooManyRequests"
                    },
                    "500": {
                        "$ref": "#/components/responses/ErrorInternalServerError"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#/components/parameters/PrettyResponse"
                },
                {
                    "$ref": "#/components/parameters/X-Request-Id"
                }
            ]
        },
        "/categories/{categoryID}": {
            "summary": "Operate on a single Category entity",
            "description": "Operate on a single Category entity by its ID.",
            "get": {
                "tags": [
                    "Categories"
                ],
                "summary": "Retrieve a category",
                "description": "Retrieve a single Category entity by its ID. If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -\u003e edge, not entity -\u003e edge -\u003e edge -\u003e etc).",
                "operationId": "getCategory",
                "responses": {
                    "200": {
                        "description": "The requested Category entity.",
                        "headers": {
                            "X-Ratelimit-Limit": {
                                "$ref": "#/components/headers/X-Ratelimit-Limit"
                            },
                            "X-Ratelimit-Remaining": {
                                "$ref": "#/components/headers/X-Ratelimit-Remaining"
                            },
                            "X-Ratelimit-Reset": {
                                "$ref": "#/components/headers/X-Ratelimit-Reset"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CategoryRead"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/ErrorBadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/ErrorUnauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/ErrorForbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/ErrorNotFound"
                    },
                    "429": {
                        "$ref": "#/components/responses/ErrorTooManyRequests"
                    },
                    "500": {
                        "$ref": "#/components/responses/ErrorInternalServerError"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Categories"
                ],
                "summary": "Delete a category",
                "description": "Delete a single Category entity by its ID.",
                "operationId": "deleteCategory",
                "responses": {
                    "204": {
                        "description": "The requested Category entity.",
                        "headers": {
                            "X-Ratelimit-Limit": {
                                "$ref": "#/components/headers/X-Ratelimit-Limit"
                            },
                            "X-Ratelimit-Remaining": {
                                "$ref": "#/components/headers/X-Ratelimit-Remaining"
                            },
                            "X-Ratelimit-Reset": {
                                "$ref": "#/components/headers/X-Ratelimit-Reset"
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/ErrorBadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/ErrorUnauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/ErrorForbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/ErrorNotFound"
                    },
                    "429": {
                        "$ref": "#/components/responses/ErrorTooManyRequests"
                    },
                    "500": {
                        "$ref": "#/components/responses/ErrorInternalServerError"
                    }
                }
            },
            "patch": {
                "tags": [
                    "Categories"
                ],
                "summary": "Update a category",
                "description": "Update an existing Category entity. If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -\u003e edge, not entity -\u003e edge -\u003e edge -\u003e etc).",
                "operationId": "updateCategory",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CategoryUpdate"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "The update Category entity.",
                        "headers": {
                            "X-Ratelimit-Limit": {
                                "$ref": "#/components/headers/X-Ratelimit-Limit"
                            },
                            "X-Ratelimit-Remaining": {
                                "$ref": "#/components/headers/X-Ratelimit-Remaining"
                            },
                            "X-Ratelimit-Reset": {
                                "$ref": "#/components/headers/X-Ratelimit-Reset"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CategoryRead"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/ErrorBadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/ErrorUnauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/ErrorForbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/ErrorNotFound"
                    },
                    "409": {
                        "$ref": "#/components/responses/ErrorConflict"
                    },
                    "429": {
                        "$ref": "#/components/responses/ErrorTooManyRequests"
                    },
                    "500": {
                        "$ref": "#/components/responses/ErrorInternalServerError"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#/components/parameters/PrettyResponse"
                },
                {
                    "$ref": "#/components/parameters/CategoryID"
                },
                {
                    "$ref": "#/components/parameters/X-Request-Id"
                }
            ]
        },
        "/categories/{categoryID}/pets": {
            "summary": "List a categories associated pets",
            "description": "List a categories associated pets (Pet entity type). If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -\u003e edge, not entity -\u003e edge -\u003e edge -\u003e etc).",
            "get": {
                "tags": [
                    "Categories",
                    "Pets"
                ],
                "summary": "List a categories associated pets",
                "description": "List a categories associated pets (Pet entity type). If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -\u003e edge, not entity -\u003e edge -\u003e edge -\u003e etc).",
                "operationId": "listCategoryPets",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/Page"
                    },
                    {
                        "name": "per_page",
                        "in": "query",
                        "description": "The number of entities to retrieve per page.",
                        "schema": {
                            "type": "integer",
                            "maximum": 100,
                            "minimum": 1,
                            "default": 10
                        }
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Sort entity results by the given field.",
                        "schema": {
                            "$ref": "#/components/schemas/PetSortableFields",
                            "default": "name"
                        }
                    },
                    {
                        "name": "order",
                        "in": "query",
                        "description": "Order the results in ascending or descending order.",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "asc",
                                "desc"
                            ],
                            "default": "asc"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/FilterOperation"
                    },
                    {
                        "$ref": "#/components/parameters/PetIDEQ"
                    },
                    {
                        "$ref": "#/components/parameters/PetIDNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/PetIDIn"
                    },
                    {
                        "$ref": "#/components/parameters/PetIDNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/PetNameEQ"
                    },
                    {
                        "$ref": "#/components/parameters/PetNameNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/PetNameIn"
                    },
                    {
                        "$ref": "#/components/parameters/PetNameNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/PetNameEqualFold"
                    },
                    {
                        "$ref": "#/components/parameters/PetNameContains"
                    },
                    {
                        "$ref": "#/components/parameters/PetNameContainsFold"
                    },
                    {
                        "$ref": "#/components/parameters/PetNameHasPrefix"
                    },
                    {
                        "$ref": "#/components/parameters/PetNameHasSuffix"
                    },
                    {
                        "$ref": "#/components/parameters/PetNicknamesIsNil"
                    },
                    {
                        "$ref": "#/components/parameters/PetAgeEQ"
                    },
                    {
                        "$ref": "#/components/parameters/PetAgeNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/PetAgeGT"
                    },
                    {
                        "$ref": "#/components/parameters/PetAgeLT"
                    },
                    {
                        "$ref": "#/components/parameters/PetAgeIn"
                    },
                    {
                        "$ref": "#/components/parameters/PetAgeNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/PetTypeEQ"
                    },
                    {
                        "$ref": "#/components/parameters/PetTypeNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/PetTypeIn"
                    },
                    {
                        "$ref": "#/components/parameters/PetTypeNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeHasCategory"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeCategoryIDEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeCategoryIDNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeCategoryIDIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeCategoryIDNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeCategoryCreatedAtGT"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeCategoryCreatedAtLT"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeCategoryUpdatedAtGT"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeCategoryUpdatedAtLT"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeHasOwner"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerIDEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerIDNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerIDIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerIDNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerCreatedAtGT"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerCreatedAtLT"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerUpdatedAtGT"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerUpdatedAtLT"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerNameEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerNameNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerNameIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerNameNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerNameEqualFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerNameContains"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerNameContainsFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerNameHasPrefix"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerNameHasSuffix"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerTypeEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerTypeNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerTypeIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerTypeNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerDescriptionIsNil"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerDescriptionContains"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerDescriptionContainsFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerEnabledEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerEmailEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerEmailNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerEmailIsNil"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerEmailIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerEmailNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerEmailEqualFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerEmailContains"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerEmailContainsFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerEmailHasPrefix"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerEmailHasSuffix"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeHasFriend"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendIDEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendIDNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendIDIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendIDNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendNameEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendNameNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendNameIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendNameNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendNameEqualFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendNameContains"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendNameContainsFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendNameHasPrefix"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendNameHasSuffix"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendNicknamesIsNil"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendAgeEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendAgeNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendAgeGT"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendAgeLT"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendAgeIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendAgeNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendTypeEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendTypeNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendTypeIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendTypeNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeHasFollowedBy"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedByIDEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedByIDNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedByIDIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedByIDNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedByCreatedAtGT"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedByCreatedAtLT"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedByUpdatedAtGT"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedByUpdatedAtLT"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedByNameEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedByNameNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedByNameIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedByNameNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedByNameEqualFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedByNameContains"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedByNameContainsFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedByNameHasPrefix"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedByNameHasSuffix"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedByTypeEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedByTypeNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedByTypeIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedByTypeNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedByDescriptionIsNil"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedByDescriptionContains"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedByDescriptionContainsFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedByEnabledEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedByEmailEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedByEmailNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedByEmailIsNil"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedByEmailIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedByEmailNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedByEmailEqualFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedByEmailContains"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedByEmailContainsFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedByEmailHasPrefix"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedByEmailHasSuffix"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeHasFollowing"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The requested pets.",
                        "headers": {
                            "X-Ratelimit-Limit": {
                                "$ref": "#/components/headers/X-Ratelimit-Limit"
                            },
                            "X-Ratelimit-Remaining": {
                                "$ref": "#/components/headers/X-Ratelimit-Remaining"
                            },
                            "X-Ratelimit-Reset": {
                                "$ref": "#/components/headers/X-Ratelimit-Reset"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PetList"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/ErrorBadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/ErrorUnauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/ErrorForbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/ErrorNotFound"
                    },
                    "429": {
                        "$ref": "#/components/responses/ErrorTooManyRequests"
                    },
                    "500": {
                        "$ref": "#/components/responses/ErrorInternalServerError"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#/components/parameters/PrettyResponse"
                },
                {
                    "$ref": "#/components/parameters/CategoryID"
                },
                {
                    "$ref": "#/components/parameters/X-Request-Id"
                }
            ]
        },
        "/follows": {
            "summary": "List follows",
            "description": "List Follow entities (including pagination, filtering, sorting, etc). If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -\u003e edge, not entity -\u003e edge -\u003e edge -\u003e etc).",
            "get": {
                "tags": [
                    "Follows"
                ],
                "summary": "List follows",
                "description": "List Follow entities (including pagination, filtering, sorting, etc). If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -\u003e edge, not entity -\u003e edge -\u003e edge -\u003e etc).",
                "operationId": "listFollows",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/Page"
                    },
                    {
                        "name": "per_page",
                        "in": "query",
                        "description": "The number of entities to retrieve per page.",
                        "schema": {
                            "type": "integer",
                            "maximum": 100,
                            "minimum": 1,
                            "default": 10
                        }
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Sort entity results by the given field.",
                        "schema": {
                            "$ref": "#/components/schemas/FollowSortableFields"
                        }
                    },
                    {
                        "name": "order",
                        "in": "query",
                        "description": "Order the results in ascending or descending order.",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "asc",
                                "desc"
                            ],
                            "default": "asc"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The requested Follow.",
                        "headers": {
                            "X-Ratelimit-Limit": {
                                "$ref": "#/components/headers/X-Ratelimit-Limit"
                            },
                            "X-Ratelimit-Remaining": {
                                "$ref": "#/components/headers/X-Ratelimit-Remaining"
                            },
                            "X-Ratelimit-Reset": {
                                "$ref": "#/components/headers/X-Ratelimit-Reset"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FollowList"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/ErrorBadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/ErrorUnauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/ErrorForbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/ErrorNotFound"
                    },
                    "429": {
                        "$ref": "#/components/responses/ErrorTooManyRequests"
                    },
                    "500": {
                        "$ref": "#/components/responses/ErrorInternalServerError"
                    }
                }
            },
            "post": {
                "tags": [
                    "Follows"
                ],
                "summary": "Create a new follow",
                "description": "Create a new Follow entity. If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -\u003e edge, not entity -\u003e edge -\u003e edge -\u003e etc).",
                "operationId": "createFollow",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/FollowCreate"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "The created Follow entity.",
                        "headers": {
                            "X-Ratelimit-Limit": {
                                "$ref": "#/components/headers/X-Ratelimit-Limit"
                            },
                            "X-Ratelimit-Remaining": {
                                "$ref": "#/components/headers/X-Ratelimit-Remaining"
                            },
                            "X-Ratelimit-Reset": {
                                "$ref": "#/components/headers/X-Ratelimit-Reset"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FollowRead"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/ErrorBadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/ErrorUnauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/ErrorForbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/ErrorNotFound"
                    },
                    "409": {
                        "$ref": "#/components/responses/ErrorConflict"
                    },
                    "429": {
                        "$ref": "#/components/responses/ErrorTooManyRequests"
                    },
                    "500": {
                        "$ref": "#/components/responses/ErrorInternalServerError"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#/components/parameters/PrettyResponse"
                },
                {
                    "$ref": "#/components/parameters/X-Request-Id"
                }
            ]
        },
        "/friendships": {
            "summary": "List friendships",
            "description": "List Friendship entities (including pagination, filtering, sorting, etc). If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -\u003e edge, not entity -\u003e edge -\u003e edge -\u003e etc).",
            "get": {
                "tags": [
                    "Friendships"
                ],
                "summary": "List friendships",
                "description": "List Friendship entities (including pagination, filtering, sorting, etc). If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -\u003e edge, not entity -\u003e edge -\u003e edge -\u003e etc).",
                "operationId": "listFriendships",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/Page"
                    },
                    {
                        "name": "per_page",
                        "in": "query",
                        "description": "The number of entities to retrieve per page.",
                        "schema": {
                            "type": "integer",
                            "maximum": 100,
                            "minimum": 1,
                            "default": 10
                        }
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Sort entity results by the given field.",
                        "schema": {
                            "$ref": "#/components/schemas/FriendshipSortableFields",
                            "default": "id"
                        }
                    },
                    {
                        "name": "order",
                        "in": "query",
                        "description": "Order the results in ascending or descending order.",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "asc",
                                "desc"
                            ],
                            "default": "asc"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/FilterOperation"
                    },
                    {
                        "$ref": "#/components/parameters/FriendshipIDEQ"
                    },
                    {
                        "$ref": "#/components/parameters/FriendshipIDNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/FriendshipIDIn"
                    },
                    {
                        "$ref": "#/components/parameters/FriendshipIDNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/FriendshipUserIDEQ"
                    },
                    {
                        "$ref": "#/components/parameters/FriendshipUserIDNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/FriendshipUserIDIn"
                    },
                    {
                        "$ref": "#/components/parameters/FriendshipUserIDNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/FriendshipFriendIDEQ"
                    },
                    {
                        "$ref": "#/components/parameters/FriendshipFriendIDNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/FriendshipFriendIDIn"
                    },
                    {
                        "$ref": "#/components/parameters/FriendshipFriendIDNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeHasUser"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeUserCreatedAtGT"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeUserCreatedAtLT"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeUserUpdatedAtGT"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeUserUpdatedAtLT"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeUserNameEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeUserNameNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeUserNameIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeUserNameNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeUserNameEqualFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeUserNameContains"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeUserNameContainsFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeUserNameHasPrefix"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeUserNameHasSuffix"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeUserTypeEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeUserTypeNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeUserTypeIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeUserTypeNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeUserDescriptionIsNil"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeUserDescriptionContains"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeUserDescriptionContainsFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeUserEnabledEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeUserEmailEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeUserEmailNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeUserEmailIsNil"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeUserEmailIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeUserEmailNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeUserEmailEqualFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeUserEmailContains"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeUserEmailContainsFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeUserEmailHasPrefix"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeUserEmailHasSuffix"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeHasFriend"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendCreatedAtGT"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendCreatedAtLT"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendUpdatedAtGT"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendUpdatedAtLT"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendNameEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendNameNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendNameIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendNameNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendNameEqualFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendNameContains"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendNameContainsFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendNameHasPrefix"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendNameHasSuffix"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendTypeEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendTypeNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendTypeIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendTypeNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendDescriptionIsNil"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendDescriptionContains"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendDescriptionContainsFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendEnabledEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendEmailEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendEmailNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendEmailIsNil"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendEmailIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendEmailNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendEmailEqualFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendEmailContains"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendEmailContainsFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendEmailHasPrefix"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendEmailHasSuffix"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The requested Friendship.",
                        "headers": {
                            "X-Ratelimit-Limit": {
                                "$ref": "#/components/headers/X-Ratelimit-Limit"
                            },
                            "X-Ratelimit-Remaining": {
                                "$ref": "#/components/headers/X-Ratelimit-Remaining"
                            },
                            "X-Ratelimit-Reset": {
                                "$ref": "#/components/headers/X-Ratelimit-Reset"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FriendshipList"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/ErrorBadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/ErrorUnauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/ErrorForbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/ErrorNotFound"
                    },
                    "429": {
                        "$ref": "#/components/responses/ErrorTooManyRequests"
                    },
                    "500": {
                        "$ref": "#/components/responses/ErrorInternalServerError"
                    }
                }
            },
            "post": {
                "tags": [
                    "Friendships"
                ],
                "summary": "Create a new friendship",
                "description": "Create a new Friendship entity. If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -\u003e edge, not entity -\u003e edge -\u003e edge -\u003e etc).",
                "operationId": "createFriendship",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/FriendshipCreate"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "The created Friendship entity.",
                        "headers": {
                            "X-Ratelimit-Limit": {
                                "$ref": "#/components/headers/X-Ratelimit-Limit"
                            },
                            "X-Ratelimit-Remaining": {
                                "$ref": "#/components/headers/X-Ratelimit-Remaining"
                            },
                            "X-Ratelimit-Reset": {
                                "$ref": "#/components/headers/X-Ratelimit-Reset"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FriendshipRead"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/ErrorBadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/ErrorUnauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/ErrorForbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/ErrorNotFound"
                    },
                    "409": {
                        "$ref": "#/components/responses/ErrorConflict"
                    },
                    "429": {
                        "$ref": "#/components/responses/ErrorTooManyRequests"
                    },
                    "500": {
                        "$ref": "#/components/responses/ErrorInternalServerError"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#/components/parameters/PrettyResponse"
                },
                {
                    "$ref": "#/components/parameters/X-Request-Id"
                }
            ]
        },
        "/friendships/{friendshipID}": {
            "summary": "Operate on a single Friendship entity",
            "description": "Operate on a single Friendship entity by its ID.",
            "get": {
                "tags": [
                    "Friendships"
                ],
                "summary": "Retrieve a friendship",
                "description": "Retrieve a single Friendship entity by its ID. If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -\u003e edge, not entity -\u003e edge -\u003e edge -\u003e etc).",
                "operationId": "getFriendship",
                "responses": {
                    "200": {
                        "description": "The requested Friendship entity.",
                        "headers": {
                            "X-Ratelimit-Limit": {
                                "$ref": "#/components/headers/X-Ratelimit-Limit"
                            },
                            "X-Ratelimit-Remaining": {
                                "$ref": "#/components/headers/X-Ratelimit-Remaining"
                            },
                            "X-Ratelimit-Reset": {
                                "$ref": "#/components/headers/X-Ratelimit-Reset"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FriendshipRead"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/ErrorBadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/ErrorUnauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/ErrorForbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/ErrorNotFound"
                    },
                    "429": {
                        "$ref": "#/components/responses/ErrorTooManyRequests"
                    },
                    "500": {
                        "$ref": "#/components/responses/ErrorInternalServerError"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Friendships"
                ],
                "summary": "Delete a friendship",
                "description": "Delete a single Friendship entity by its ID.",
                "operationId": "deleteFriendship",
                "responses": {
                    "204": {
                        "description": "The requested Friendship entity.",
                        "headers": {
                            "X-Ratelimit-Limit": {
                                "$ref": "#/components/headers/X-Ratelimit-Limit"
                            },
                            "X-Ratelimit-Remaining": {
                                "$ref": "#/components/headers/X-Ratelimit-Remaining"
                            },
                            "X-Ratelimit-Reset": {
                                "$ref": "#/components/headers/X-Ratelimit-Reset"
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/ErrorBadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/ErrorUnauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/ErrorForbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/ErrorNotFound"
                    },
                    "429": {
                        "$ref": "#/components/responses/ErrorTooManyRequests"
                    },
                    "500": {
                        "$ref": "#/components/responses/ErrorInternalServerError"
                    }
                }
            },
            "patch": {
                "tags": [
                    "Friendships"
                ],
                "summary": "Update a friendship",
                "description": "Update an existing Friendship entity. If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -\u003e edge, not entity -\u003e edge -\u003e edge -\u003e etc).",
                "operationId": "updateFriendship",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/FriendshipUpdate"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "The update Friendship entity.",
                        "headers": {
                            "X-Ratelimit-Limit": {
                                "$ref": "#/components/headers/X-Ratelimit-Limit"
                            },
                            "X-Ratelimit-Remaining": {
                                "$ref": "#/components/headers/X-Ratelimit-Remaining"
                            },
                            "X-Ratelimit-Reset": {
                                "$ref": "#/components/headers/X-Ratelimit-Reset"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FriendshipRead"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/ErrorBadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/ErrorUnauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/ErrorForbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/ErrorNotFound"
                    },
                    "409": {
                        "$ref": "#/components/responses/ErrorConflict"
                    },
                    "429": {
                        "$ref": "#/components/responses/ErrorTooManyRequests"
                    },
                    "500": {
                        "$ref": "#/components/responses/ErrorInternalServerError"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#/components/parameters/PrettyResponse"
                },
                {
                    "$ref": "#/components/parameters/FriendshipID"
                },
                {
                    "$ref": "#/components/parameters/X-Request-Id"
                }
            ]
        },
        "/friendships/{friendshipID}/friend": {
            "summary": "Get a friendships associated friend",
            "description": "Get a friendships associated friend (User entity type). If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -\u003e edge, not entity -\u003e edge -\u003e edge -\u003e etc).",
            "get": {
                "tags": [
                    "Friendships",
                    "Users"
                ],
                "summary": "Get a friendships associated friend",
                "description": "Get a friendships associated friend (User entity type). If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -\u003e edge, not entity -\u003e edge -\u003e edge -\u003e etc).",
                "operationId": "getFriendshipFriend",
                "responses": {
                    "200": {
                        "description": "The requested friend entity.",
                        "headers": {
                            "X-Ratelimit-Limit": {
                                "$ref": "#/components/headers/X-Ratelimit-Limit"
                            },
                            "X-Ratelimit-Remaining": {
                                "$ref": "#/components/headers/X-Ratelimit-Remaining"
                            },
                            "X-Ratelimit-Reset": {
                                "$ref": "#/components/headers/X-Ratelimit-Reset"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserRead"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/ErrorBadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/ErrorUnauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/ErrorForbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/ErrorNotFound"
                    },
                    "429": {
                        "$ref": "#/components/responses/ErrorTooManyRequests"
                    },
                    "500": {
                        "$ref": "#/components/responses/ErrorInternalServerError"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#/components/parameters/PrettyResponse"
                },
                {
                    "$ref": "#/components/parameters/FriendshipID"
                },
                {
                    "$ref": "#/components/parameters/X-Request-Id"
                }
            ]
        },
        "/friendships/{friendshipID}/user": {
            "summary": "Get a friendships associated user",
            "description": "Get a friendships associated user (User entity type). If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -\u003e edge, not entity -\u003e edge -\u003e edge -\u003e etc).",
            "get": {
                "tags": [
                    "Friendships",
                    "Users"
                ],
                "summary": "Get a friendships associated user",
                "description": "Get a friendships associated user (User entity type). If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -\u003e edge, not entity -\u003e edge -\u003e edge -\u003e etc).",
                "operationId": "getFriendshipUser",
                "responses": {
                    "200": {
                        "description": "The requested user entity.",
                        "headers": {
                            "X-Ratelimit-Limit": {
                                "$ref": "#/components/headers/X-Ratelimit-Limit"
                            },
                            "X-Ratelimit-Remaining": {
                                "$ref": "#/components/headers/X-Ratelimit-Remaining"
                            },
                            "X-Ratelimit-Reset": {
                                "$ref": "#/components/headers/X-Ratelimit-Reset"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserRead"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/ErrorBadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/ErrorUnauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/ErrorForbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/ErrorNotFound"
                    },
                    "429": {
                        "$ref": "#/components/responses/ErrorTooManyRequests"
                    },
                    "500": {
                        "$ref": "#/components/responses/ErrorInternalServerError"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#/components/parameters/PrettyResponse"
                },
                {
                    "$ref": "#/components/parameters/FriendshipID"
                },
                {
                    "$ref": "#/components/parameters/X-Request-Id"
                }
            ]
        },
        "/openapi.json": {
            "get": {
                "tags": [
                    "Meta"
                ],
                "summary": "Get OpenAPI spec",
                "description": "Get the OpenAPI specification for this service.",
                "operationId": "getOpenAPI",
                "responses": {
                    "200": {
                        "description": "OpenAPI specification was found",
                        "headers": {
                            "X-Ratelimit-Limit": {
                                "$ref": "#/components/headers/X-Ratelimit-Limit"
                            },
                            "X-Ratelimit-Remaining": {
                                "$ref": "#/components/headers/X-Ratelimit-Remaining"
                            },
                            "X-Ratelimit-Reset": {
                                "$ref": "#/components/headers/X-Ratelimit-Reset"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": true
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/ErrorBadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/ErrorUnauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/ErrorForbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/ErrorNotFound"
                    },
                    "429": {
                        "$ref": "#/components/responses/ErrorTooManyRequests"
                    },
                    "500": {
                        "$ref": "#/components/responses/ErrorInternalServerError"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#/components/parameters/X-Request-Id"
                }
            ]
        },
        "/pets": {
            "summary": "List pets",
            "description": "List Pet entities (including pagination, filtering, sorting, etc). If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -\u003e edge, not entity -\u003e edge -\u003e edge -\u003e etc).",
            "get": {
                "tags": [
                    "Pets"
                ],
                "summary": "List pets",
                "description": "List Pet entities (including pagination, filtering, sorting, etc). If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -\u003e edge, not entity -\u003e edge -\u003e edge -\u003e etc).",
                "operationId": "listPets",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/Page"
                    },
                    {
                        "name": "per_page",
                        "in": "query",
                        "description": "The number of entities to retrieve per page.",
                        "schema": {
                            "type": "integer",
                            "maximum": 100,
                            "minimum": 1,
                            "default": 10
                        }
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Sort entity results by the given field.",
                        "schema": {
                            "$ref": "#/components/schemas/PetSortableFields",
                            "default": "name"
                        }
                    },
                    {
                        "name": "order",
                        "in": "query",
                        "description": "Order the results in ascending or descending order.",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "asc",
                                "desc"
                            ],
                            "default": "asc"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/FilterOperation"
                    },
                    {
                        "$ref": "#/components/parameters/PetIDEQ"
                    },
                    {
                        "$ref": "#/components/parameters/PetIDNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/PetIDIn"
                    },
                    {
                        "$ref": "#/components/parameters/PetIDNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/PetNameEQ"
                    },
                    {
                        "$ref": "#/components/parameters/PetNameNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/PetNameIn"
                    },
                    {
                        "$ref": "#/components/parameters/PetNameNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/PetNameEqualFold"
                    },
                    {
                        "$ref": "#/components/parameters/PetNameContains"
                    },
                    {
                        "$ref": "#/components/parameters/PetNameContainsFold"
                    },
                    {
                        "$ref": "#/components/parameters/PetNameHasPrefix"
                    },
                    {
                        "$ref": "#/components/parameters/PetNameHasSuffix"
                    },
                    {
                        "$ref": "#/components/parameters/PetNicknamesIsNil"
                    },
                    {
                        "$ref": "#/components/parameters/PetAgeEQ"
                    },
                    {
                        "$ref": "#/components/parameters/PetAgeNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/PetAgeGT"
                    },
                    {
                        "$ref": "#/components/parameters/PetAgeLT"
                    },
                    {
                        "$ref": "#/components/parameters/PetAgeIn"
                    },
                    {
                        "$ref": "#/components/parameters/PetAgeNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/PetTypeEQ"
                    },
                    {
                        "$ref": "#/components/parameters/PetTypeNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/PetTypeIn"
                    },
                    {
                        "$ref": "#/components/parameters/PetTypeNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeHasCategory"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeCategoryIDEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeCategoryIDNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeCategoryIDIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeCategoryIDNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeCategoryCreatedAtGT"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeCategoryCreatedAtLT"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeCategoryUpdatedAtGT"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeCategoryUpdatedAtLT"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeHasOwner"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerIDEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerIDNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerIDIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerIDNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerCreatedAtGT"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerCreatedAtLT"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerUpdatedAtGT"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerUpdatedAtLT"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerNameEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerNameNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerNameIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerNameNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerNameEqualFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerNameContains"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerNameContainsFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerNameHasPrefix"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerNameHasSuffix"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerTypeEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerTypeNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerTypeIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerTypeNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerDescriptionIsNil"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerDescriptionContains"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerDescriptionContainsFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerEnabledEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerEmailEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerEmailNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerEmailIsNil"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerEmailIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerEmailNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerEmailEqualFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerEmailContains"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerEmailContainsFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerEmailHasPrefix"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerEmailHasSuffix"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeHasFriend"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendIDEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendIDNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendIDIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendIDNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendNameEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendNameNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendNameIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendNameNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendNameEqualFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendNameContains"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendNameContainsFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendNameHasPrefix"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendNameHasSuffix"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendNicknamesIsNil"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendAgeEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendAgeNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendAgeGT"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendAgeLT"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendAgeIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendAgeNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendTypeEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendTypeNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendTypeIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendTypeNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeHasFollowedBy"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedByIDEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedByIDNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedByIDIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedByIDNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedByCreatedAtGT"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedByCreatedAtLT"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedByUpdatedAtGT"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedByUpdatedAtLT"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedByNameEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedByNameNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedByNameIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedByNameNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedByNameEqualFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedByNameContains"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedByNameContainsFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedByNameHasPrefix"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedByNameHasSuffix"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedByTypeEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedByTypeNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedByTypeIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedByTypeNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedByDescriptionIsNil"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedByDescriptionContains"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedByDescriptionContainsFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedByEnabledEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedByEmailEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedByEmailNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedByEmailIsNil"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedByEmailIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedByEmailNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedByEmailEqualFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedByEmailContains"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedByEmailContainsFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedByEmailHasPrefix"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedByEmailHasSuffix"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeHasFollowing"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The requested Pet.",
                        "headers": {
                            "X-Ratelimit-Limit": {
                                "$ref": "#/components/headers/X-Ratelimit-Limit"
                            },
                            "X-Ratelimit-Remaining": {
                                "$ref": "#/components/headers/X-Ratelimit-Remaining"
                            },
                            "X-Ratelimit-Reset": {
                                "$ref": "#/components/headers/X-Ratelimit-Reset"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PetList"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/ErrorBadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/ErrorUnauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/ErrorForbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/ErrorNotFound"
                    },
                    "429": {
                        "$ref": "#/components/responses/ErrorTooManyRequests"
                    },
                    "500": {
                        "$ref": "#/components/responses/ErrorInternalServerError"
                    }
                }
            },
            "post": {
                "tags": [
                    "Pets"
                ],
                "summary": "Create a new pet",
                "description": "Create a new Pet entity. If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -\u003e edge, not entity -\u003e edge -\u003e edge -\u003e etc).",
                "operationId": "createPet",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PetCreate"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "The created Pet entity.",
                        "headers": {
                            "X-Ratelimit-Limit": {
                                "$ref": "#/components/headers/X-Ratelimit-Limit"
                            },
                            "X-Ratelimit-Remaining": {
                                "$ref": "#/components/headers/X-Ratelimit-Remaining"
                            },
                            "X-Ratelimit-Reset": {
                                "$ref": "#/components/headers/X-Ratelimit-Reset"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PetRead"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/ErrorBadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/ErrorUnauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/ErrorForbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/ErrorNotFound"
                    },
                    "409": {
                        "$ref": "#/components/responses/ErrorConflict"
                    },
                    "429": {
                        "$ref": "#/components/responses/ErrorTooManyRequests"
                    },
                    "500": {
                        "$ref": "#/components/responses/ErrorInternalServerError"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#/components/parameters/PrettyResponse"
                },
                {
                    "$ref": "#/components/parameters/X-Request-Id"
                }
            ]
        },
        "/pets/{petID}": {
            "summary": "Operate on a single Pet entity",
            "description": "Operate on a single Pet entity by its ID.",
            "get": {
                "tags": [
                    "Pets"
                ],
                "summary": "Retrieve a pet",
                "description": "Retrieve a single Pet entity by its ID. If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -\u003e edge, not entity -\u003e edge -\u003e edge -\u003e etc).",
                "operationId": "getPet",
                "responses": {
                    "200": {
                        "description": "The requested Pet entity.",
                        "headers": {
                            "X-Ratelimit-Limit": {
                                "$ref": "#/components/headers/X-Ratelimit-Limit"
                            },
                            "X-Ratelimit-Remaining": {
                                "$ref": "#/components/headers/X-Ratelimit-Remaining"
                            },
                            "X-Ratelimit-Reset": {
                                "$ref": "#/components/headers/X-Ratelimit-Reset"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PetRead"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/ErrorBadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/ErrorUnauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/ErrorForbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/ErrorNotFound"
                    },
                    "429": {
                        "$ref": "#/components/responses/ErrorTooManyRequests"
                    },
                    "500": {
                        "$ref": "#/components/responses/ErrorInternalServerError"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Pets"
                ],
                "summary": "Delete a pet",
                "description": "Delete a single Pet entity by its ID.",
                "operationId": "deletePet",
                "responses": {
                    "204": {
                        "description": "The requested Pet entity.",
                        "headers": {
                            "X-Ratelimit-Limit": {
                                "$ref": "#/components/headers/X-Ratelimit-Limit"
                            },
                            "X-Ratelimit-Remaining": {
                                "$ref": "#/components/headers/X-Ratelimit-Remaining"
                            },
                            "X-Ratelimit-Reset": {
                                "$ref": "#/components/headers/X-Ratelimit-Reset"
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/ErrorBadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/ErrorUnauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/ErrorForbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/ErrorNotFound"
                    },
                    "429": {
                        "$ref": "#/components/responses/ErrorTooManyRequests"
                    },
                    "500": {
                        "$ref": "#/components/responses/ErrorInternalServerError"
                    }
                }
            },
            "patch": {
                "tags": [
                    "Pets"
                ],
                "summary": "Update a pet",
                "description": "Update an existing Pet entity. If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -\u003e edge, not entity -\u003e edge -\u003e edge -\u003e etc).",
                "operationId": "updatePet",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PetUpdate"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "The update Pet entity.",
                        "headers": {
                            "X-Ratelimit-Limit": {
                                "$ref": "#/components/headers/X-Ratelimit-Limit"
                            },
                            "X-Ratelimit-Remaining": {
                                "$ref": "#/components/headers/X-Ratelimit-Remaining"
                            },
                            "X-Ratelimit-Reset": {
                                "$ref": "#/components/headers/X-Ratelimit-Reset"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PetRead"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/ErrorBadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/ErrorUnauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/ErrorForbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/ErrorNotFound"
                    },
                    "409": {
                        "$ref": "#/components/responses/ErrorConflict"
                    },
                    "429": {
                        "$ref": "#/components/responses/ErrorTooManyRequests"
                    },
                    "500": {
                        "$ref": "#/components/responses/ErrorInternalServerError"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#/components/parameters/PrettyResponse"
                },
                {
                    "$ref": "#/components/parameters/PetID"
                },
                {
                    "$ref": "#/components/parameters/X-Request-Id"
                }
            ]
        },
        "/pets/{petID}/categories": {
            "summary": "Categories that the pet belongs to.",
            "description": "List a pets associated categories (Category entity type). If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -\u003e edge, not entity -\u003e edge -\u003e edge -\u003e etc).",
            "get": {
                "tags": [
                    "Pets",
                    "Categories"
                ],
                "summary": "Categories that the pet belongs to.",
                "description": "List a pets associated categories (Category entity type). If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -\u003e edge, not entity -\u003e edge -\u003e edge -\u003e etc).",
                "operationId": "listPetCategories",
                "parameters": [
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Sort entity results by the given field.",
                        "schema": {
                            "$ref": "#/components/schemas/CategorySortableFields",
                            "default": "id"
                        }
                    },
                    {
                        "name": "order",
                        "in": "query",
                        "description": "Order the results in ascending or descending order.",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "asc",
                                "desc"
                            ],
                            "default": "asc"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/FilterOperation"
                    },
                    {
                        "$ref": "#/components/parameters/CategoryIDEQ"
                    },
                    {
                        "$ref": "#/components/parameters/CategoryIDNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/CategoryIDIn"
                    },
                    {
                        "$ref": "#/components/parameters/CategoryIDNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/CategoryCreatedAtGT"
                    },
                    {
                        "$ref": "#/components/parameters/CategoryCreatedAtLT"
                    },
                    {
                        "$ref": "#/components/parameters/CategoryUpdatedAtGT"
                    },
                    {
                        "$ref": "#/components/parameters/CategoryUpdatedAtLT"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The requested categories.",
                        "headers": {
                            "X-Ratelimit-Limit": {
                                "$ref": "#/components/headers/X-Ratelimit-Limit"
                            },
                            "X-Ratelimit-Remaining": {
                                "$ref": "#/components/headers/X-Ratelimit-Remaining"
                            },
                            "X-Ratelimit-Reset": {
                                "$ref": "#/components/headers/X-Ratelimit-Reset"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PetCategoryList"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/ErrorBadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/ErrorUnauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/ErrorForbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/ErrorNotFound"
                    },
                    "429": {
                        "$ref": "#/components/responses/ErrorTooManyRequests"
                    },
                    "500": {
                        "$ref": "#/components/responses/ErrorInternalServerError"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#/components/parameters/PrettyResponse"
                },
                {
                    "$ref": "#/components/parameters/PetID"
                },
                {
                    "$ref": "#/components/parameters/X-Request-Id"
                }
            ]
        },
        "/pets/{petID}/followed-by": {
            "summary": "Users that this pet is followed by.",
            "description": "List a pets associated followedBys (User entity type). If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -\u003e edge, not entity -\u003e edge -\u003e edge -\u003e etc).",
            "get": {
                "tags": [
                    "Pets",
                    "Users"
                ],
                "summary": "Users that this pet is followed by.",
                "description": "List a pets associated followedBys (User entity type). If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -\u003e edge, not entity -\u003e edge -\u003e edge -\u003e etc).",
                "operationId": "listPetFollowedBys",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/Page"
                    },
                    {
                        "name": "per_page",
                        "in": "query",
                        "description": "The number of entities to retrieve per page.",
                        "schema": {
                            "type": "integer",
                            "maximum": 100,
                            "minimum": 1,
                            "default": 10
                        }
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Sort entity results by the given field.",
                        "schema": {
                            "$ref": "#/components/schemas/UserSortableFields",
                            "default": "name"
                        }
                    },
                    {
                        "name": "order",
                        "in": "query",
                        "description": "Order the results in ascending or descending order.",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "asc",
                                "desc"
                            ],
                            "default": "asc"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/FilterOperation"
                    },
                    {
                        "$ref": "#/components/parameters/UserIDEQ"
                    },
                    {
                        "$ref": "#/components/parameters/UserIDNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/UserIDIn"
                    },
                    {
                        "$ref": "#/components/parameters/UserIDNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/UserCreatedAtGT"
                    },
                    {
                        "$ref": "#/components/parameters/UserCreatedAtLT"
                    },
                    {
                        "$ref": "#/components/parameters/UserUpdatedAtGT"
                    },
                    {
                        "$ref": "#/components/parameters/UserUpdatedAtLT"
                    },
                    {
                        "$ref": "#/components/parameters/UserNameEQ"
                    },
                    {
                        "$ref": "#/components/parameters/UserNameNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/UserNameIn"
                    },
                    {
                        "$ref": "#/components/parameters/UserNameNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/UserNameEqualFold"
                    },
                    {
                        "$ref": "#/components/parameters/UserNameContains"
                    },
                    {
                        "$ref": "#/components/parameters/UserNameContainsFold"
                    },
                    {
                        "$ref": "#/components/parameters/UserNameHasPrefix"
                    },
                    {
                        "$ref": "#/components/parameters/UserNameHasSuffix"
                    },
                    {
                        "$ref": "#/components/parameters/UserTypeEQ"
                    },
                    {
                        "$ref": "#/components/parameters/UserTypeNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/UserTypeIn"
                    },
                    {
                        "$ref": "#/components/parameters/UserTypeNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/UserDescriptionIsNil"
                    },
                    {
                        "$ref": "#/components/parameters/UserDescriptionContains"
                    },
                    {
                        "$ref": "#/components/parameters/UserDescriptionContainsFold"
                    },
                    {
                        "$ref": "#/components/parameters/UserEnabledEQ"
                    },
                    {
                        "$ref": "#/components/parameters/UserEmailEQ"
                    },
                    {
                        "$ref": "#/components/parameters/UserEmailNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/UserEmailIsNil"
                    },
                    {
                        "$ref": "#/components/parameters/UserEmailIn"
                    },
                    {
                        "$ref": "#/components/parameters/UserEmailNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/UserEmailEqualFold"
                    },
                    {
                        "$ref": "#/components/parameters/UserEmailContains"
                    },
                    {
                        "$ref": "#/components/parameters/UserEmailContainsFold"
                    },
                    {
                        "$ref": "#/components/parameters/UserEmailHasPrefix"
                    },
                    {
                        "$ref": "#/components/parameters/UserEmailHasSuffix"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeHasPet"
                    },
                    {
                        "$ref": "#/components/parameters/EdgePetIDEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgePetIDNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgePetIDIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgePetIDNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgePetNameEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgePetNameNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgePetNameIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgePetNameNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgePetNameEqualFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgePetNameContains"
                    },
                    {
                        "$ref": "#/components/parameters/EdgePetNameContainsFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgePetNameHasPrefix"
                    },
                    {
                        "$ref": "#/components/parameters/EdgePetNameHasSuffix"
                    },
                    {
                        "$ref": "#/components/parameters/EdgePetNicknamesIsNil"
                    },
                    {
                        "$ref": "#/components/parameters/EdgePetAgeEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgePetAgeNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgePetAgeGT"
                    },
                    {
                        "$ref": "#/components/parameters/EdgePetAgeLT"
                    },
                    {
                        "$ref": "#/components/parameters/EdgePetAgeIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgePetAgeNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgePetTypeEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgePetTypeNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgePetTypeIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgePetTypeNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeHasFollowedPet"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedPetIDEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedPetIDNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedPetIDIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedPetIDNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedPetNameEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedPetNameNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedPetNameIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedPetNameNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedPetNameEqualFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedPetNameContains"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedPetNameContainsFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedPetNameHasPrefix"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedPetNameHasSuffix"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedPetNicknamesIsNil"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedPetAgeEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedPetAgeNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedPetAgeGT"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedPetAgeLT"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedPetAgeIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedPetAgeNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedPetTypeEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedPetTypeNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedPetTypeIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedPetTypeNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeHasFriend"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendIDEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendIDNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendIDIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendIDNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendCreatedAtGT"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendCreatedAtLT"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendUpdatedAtGT"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendUpdatedAtLT"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendNameEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendNameNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendNameIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendNameNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendNameEqualFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendNameContains"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendNameContainsFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendNameHasPrefix"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendNameHasSuffix"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendTypeEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendTypeNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendTypeIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendTypeNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendDescriptionIsNil"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendDescriptionContains"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendDescriptionContainsFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendEnabledEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendEmailEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendEmailNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendEmailIsNil"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendEmailIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendEmailNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendEmailEqualFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendEmailContains"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendEmailContainsFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendEmailHasPrefix"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendEmailHasSuffix"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeHasFollowing"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeHasFriendship"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendshipIDEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendshipIDNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendshipIDIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendshipIDNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendshipUserIDEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendshipUserIDNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendshipUserIDIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendshipUserIDNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendshipFriendIDEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendshipFriendIDNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendshipFriendIDIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendshipFriendIDNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/UserFilterGroupSearchEQ"
                    },
                    {
                        "$ref": "#/components/parameters/UserFilterGroupSearchNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/UserFilterGroupSearchIn"
                    },
                    {
                        "$ref": "#/components/parameters/UserFilterGroupSearchNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/UserFilterGroupSearchEqualFold"
                    },
                    {
                        "$ref": "#/components/parameters/UserFilterGroupSearchContains"
                    },
                    {
                        "$ref": "#/components/parameters/UserFilterGroupSearchContainsFold"
                    },
                    {
                        "$ref": "#/components/parameters/UserFilterGroupSearchHasPrefix"
                    },
                    {
                        "$ref": "#/components/parameters/UserFilterGroupSearchHasSuffix"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The requested followedBys.",
                        "headers": {
                            "X-Ratelimit-Limit": {
                                "$ref": "#/components/headers/X-Ratelimit-Limit"
                            },
                            "X-Ratelimit-Remaining": {
                                "$ref": "#/components/headers/X-Ratelimit-Remaining"
                            },
                            "X-Ratelimit-Reset": {
                                "$ref": "#/components/headers/X-Ratelimit-Reset"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserList"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/ErrorBadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/ErrorUnauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/ErrorForbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/ErrorNotFound"
                    },
                    "429": {
                        "$ref": "#/components/responses/ErrorTooManyRequests"
                    },
                    "500": {
                        "$ref": "#/components/responses/ErrorInternalServerError"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#/components/parameters/PrettyResponse"
                },
                {
                    "$ref": "#/components/parameters/PetID"
                },
                {
                    "$ref": "#/components/parameters/X-Request-Id"
                }
            ]
        },
        "/pets/{petID}/friends": {
            "summary": "Pets that this pet is friends with.",
            "description": "List a pets associated friends (Pet entity type). If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -\u003e edge, not entity -\u003e edge -\u003e edge -\u003e etc).",
            "get": {
                "tags": [
                    "Pets"
                ],
                "summary": "Pets that this pet is friends with.",
                "description": "List a pets associated friends (Pet entity type). If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -\u003e edge, not entity -\u003e edge -\u003e edge -\u003e etc).",
                "operationId": "listPetFriends",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/Page"
                    },
                    {
                        "name": "per_page",
                        "in": "query",
                        "description": "The number of entities to retrieve per page.",
                        "schema": {
                            "type": "integer",
                            "maximum": 100,
                            "minimum": 1,
                            "default": 10
                        }
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Sort entity results by the given field.",
                        "schema": {
                            "$ref": "#/components/schemas/PetSortableFields",
                            "default": "name"
                        }
                    },
                    {
                        "name": "order",
                        "in": "query",
                        "description": "Order the results in ascending or descending order.",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "asc",
                                "desc"
                            ],
                            "default": "asc"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/FilterOperation"
                    },
                    {
                        "$ref": "#/components/parameters/PetIDEQ"
                    },
                    {
                        "$ref": "#/components/parameters/PetIDNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/PetIDIn"
                    },
                    {
                        "$ref": "#/components/parameters/PetIDNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/PetNameEQ"
                    },
                    {
                        "$ref": "#/components/parameters/PetNameNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/PetNameIn"
                    },
                    {
                        "$ref": "#/components/parameters/PetNameNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/PetNameEqualFold"
                    },
                    {
                        "$ref": "#/components/parameters/PetNameContains"
                    },
                    {
                        "$ref": "#/components/parameters/PetNameContainsFold"
                    },
                    {
                        "$ref": "#/components/parameters/PetNameHasPrefix"
                    },
                    {
                        "$ref": "#/components/parameters/PetNameHasSuffix"
                    },
                    {
                        "$ref": "#/components/parameters/PetNicknamesIsNil"
                    },
                    {
                        "$ref": "#/components/parameters/PetAgeEQ"
                    },
                    {
                        "$ref": "#/components/parameters/PetAgeNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/PetAgeGT"
                    },
                    {
                        "$ref": "#/components/parameters/PetAgeLT"
                    },
                    {
                        "$ref": "#/components/parameters/PetAgeIn"
                    },
                    {
                        "$ref": "#/components/parameters/PetAgeNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/PetTypeEQ"
                    },
                    {
                        "$ref": "#/components/parameters/PetTypeNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/PetTypeIn"
                    },
                    {
                        "$ref": "#/components/parameters/PetTypeNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeHasCategory"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeCategoryIDEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeCategoryIDNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeCategoryIDIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeCategoryIDNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeCategoryCreatedAtGT"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeCategoryCreatedAtLT"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeCategoryUpdatedAtGT"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeCategoryUpdatedAtLT"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeHasOwner"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerIDEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerIDNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerIDIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerIDNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerCreatedAtGT"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerCreatedAtLT"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerUpdatedAtGT"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerUpdatedAtLT"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerNameEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerNameNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerNameIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerNameNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerNameEqualFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerNameContains"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerNameContainsFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerNameHasPrefix"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerNameHasSuffix"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerTypeEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerTypeNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerTypeIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerTypeNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerDescriptionIsNil"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerDescriptionContains"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerDescriptionContainsFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerEnabledEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerEmailEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerEmailNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerEmailIsNil"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerEmailIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerEmailNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerEmailEqualFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerEmailContains"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerEmailContainsFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerEmailHasPrefix"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerEmailHasSuffix"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeHasFriend"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendIDEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendIDNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendIDIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendIDNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendNameEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendNameNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendNameIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendNameNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendNameEqualFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendNameContains"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendNameContainsFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendNameHasPrefix"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendNameHasSuffix"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendNicknamesIsNil"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendAgeEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendAgeNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendAgeGT"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendAgeLT"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendAgeIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendAgeNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendTypeEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendTypeNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendTypeIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendTypeNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeHasFollowedBy"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedByIDEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedByIDNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedByIDIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedByIDNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedByCreatedAtGT"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedByCreatedAtLT"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedByUpdatedAtGT"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedByUpdatedAtLT"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedByNameEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedByNameNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedByNameIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedByNameNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedByNameEqualFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedByNameContains"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedByNameContainsFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedByNameHasPrefix"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedByNameHasSuffix"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedByTypeEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedByTypeNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedByTypeIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedByTypeNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedByDescriptionIsNil"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedByDescriptionContains"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedByDescriptionContainsFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedByEnabledEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedByEmailEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedByEmailNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedByEmailIsNil"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedByEmailIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedByEmailNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedByEmailEqualFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedByEmailContains"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedByEmailContainsFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedByEmailHasPrefix"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedByEmailHasSuffix"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeHasFollowing"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The requested friends.",
                        "headers": {
                            "X-Ratelimit-Limit": {
                                "$ref": "#/components/headers/X-Ratelimit-Limit"
                            },
                            "X-Ratelimit-Remaining": {
                                "$ref": "#/components/headers/X-Ratelimit-Remaining"
                            },
                            "X-Ratelimit-Reset": {
                                "$ref": "#/components/headers/X-Ratelimit-Reset"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PetList"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/ErrorBadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/ErrorUnauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/ErrorForbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/ErrorNotFound"
                    },
                    "429": {
                        "$ref": "#/components/responses/ErrorTooManyRequests"
                    },
                    "500": {
                        "$ref": "#/components/responses/ErrorInternalServerError"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#/components/parameters/PrettyResponse"
                },
                {
                    "$ref": "#/components/parameters/PetID"
                },
                {
                    "$ref": "#/components/parameters/X-Request-Id"
                }
            ]
        },
        "/pets/{petID}/owner": {
            "summary": "The user that owns the pet.",
            "description": "Get a pets associated owner (User entity type). If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -\u003e edge, not entity -\u003e edge -\u003e edge -\u003e etc).",
            "get": {
                "tags": [
                    "Pets",
                    "Users"
                ],
                "summary": "The user that owns the pet.",
                "description": "Get a pets associated owner (User entity type). If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -\u003e edge, not entity -\u003e edge -\u003e edge -\u003e etc).",
                "operationId": "getPetOwner",
                "responses": {
                    "200": {
                        "description": "The requested owner entity.",
                        "headers": {
                            "X-Ratelimit-Limit": {
                                "$ref": "#/components/headers/X-Ratelimit-Limit"
                            },
                            "X-Ratelimit-Remaining": {
                                "$ref": "#/components/headers/X-Ratelimit-Remaining"
                            },
                            "X-Ratelimit-Reset": {
                                "$ref": "#/components/headers/X-Ratelimit-Reset"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserRead"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/ErrorBadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/ErrorUnauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/ErrorForbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/ErrorNotFound"
                    },
                    "429": {
                        "$ref": "#/components/responses/ErrorTooManyRequests"
                    },
                    "500": {
                        "$ref": "#/components/responses/ErrorInternalServerError"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#/components/parameters/PrettyResponse"
                },
                {
                    "$ref": "#/components/parameters/PetID"
                },
                {
                    "$ref": "#/components/parameters/X-Request-Id"
                }
            ]
        },
        "/settings": {
            "summary": "List settings",
            "description": "List Setting entities (including pagination, filtering, sorting, etc). If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -\u003e edge, not entity -\u003e edge -\u003e edge -\u003e etc).",
            "get": {
                "tags": [
                    "Settings"
                ],
                "summary": "List settings",
                "description": "List Setting entities (including pagination, filtering, sorting, etc). If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -\u003e edge, not entity -\u003e edge -\u003e edge -\u003e etc).",
                "operationId": "listSettings",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/Page"
                    },
                    {
                        "name": "per_page",
                        "in": "query",
                        "description": "The number of entities to retrieve per page.",
                        "schema": {
                            "type": "integer",
                            "maximum": 100,
                            "minimum": 1,
                            "default": 10
                        }
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Sort entity results by the given field.",
                        "schema": {
                            "$ref": "#/components/schemas/SettingSortableFields",
                            "default": "id"
                        }
                    },
                    {
                        "name": "order",
                        "in": "query",
                        "description": "Order the results in ascending or descending order.",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "asc",
                                "desc"
                            ],
                            "default": "asc"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/FilterOperation"
                    },
                    {
                        "$ref": "#/components/parameters/SettingsIDEQ"
                    },
                    {
                        "$ref": "#/components/parameters/SettingsIDNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/SettingsIDIn"
                    },
                    {
                        "$ref": "#/components/parameters/SettingsIDNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/SettingsCreatedAtGT"
                    },
                    {
                        "$ref": "#/components/parameters/SettingsCreatedAtLT"
                    },
                    {
                        "$ref": "#/components/parameters/SettingsUpdatedAtGT"
                    },
                    {
                        "$ref": "#/components/parameters/SettingsUpdatedAtLT"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The requested Setting.",
                        "headers": {
                            "X-Ratelimit-Limit": {
                                "$ref": "#/components/headers/X-Ratelimit-Limit"
                            },
                            "X-Ratelimit-Remaining": {
                                "$ref": "#/components/headers/X-Ratelimit-Remaining"
                            },
                            "X-Ratelimit-Reset": {
                                "$ref": "#/components/headers/X-Ratelimit-Reset"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SettingList"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/ErrorBadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/ErrorUnauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/ErrorForbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/ErrorNotFound"
                    },
                    "429": {
                        "$ref": "#/components/responses/ErrorTooManyRequests"
                    },
                    "500": {
                        "$ref": "#/components/responses/ErrorInternalServerError"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#/components/parameters/PrettyResponse"
                },
                {
                    "$ref": "#/components/parameters/X-Request-Id"
                }
            ]
        },
        "/settings/{settingID}": {
            "summary": "Operate on a single Setting entity",
            "description": "Operate on a single Setting entity by its ID.",
            "get": {
                "tags": [
                    "Settings"
                ],
                "summary": "Retrieve a setting",
                "description": "Retrieve a single Setting entity by its ID. If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -\u003e edge, not entity -\u003e edge -\u003e edge -\u003e etc).",
                "operationId": "getSetting",
                "responses": {
                    "200": {
                        "description": "The requested Setting entity.",
                        "headers": {
                            "X-Ratelimit-Limit": {
                                "$ref": "#/components/headers/X-Ratelimit-Limit"
                            },
                            "X-Ratelimit-Remaining": {
                                "$ref": "#/components/headers/X-Ratelimit-Remaining"
                            },
                            "X-Ratelimit-Reset": {
                                "$ref": "#/components/headers/X-Ratelimit-Reset"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SettingRead"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/ErrorBadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/ErrorUnauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/ErrorForbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/ErrorNotFound"
                    },
                    "429": {
                        "$ref": "#/components/responses/ErrorTooManyRequests"
                    },
                    "500": {
                        "$ref": "#/components/responses/ErrorInternalServerError"
                    }
                }
            },
            "patch": {
                "tags": [
                    "Settings"
                ],
                "summary": "Update a setting",
                "description": "Update an existing Setting entity. If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -\u003e edge, not entity -\u003e edge -\u003e edge -\u003e etc).",
                "operationId": "updateSetting",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SettingUpdate"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "The update Setting entity.",
                        "headers": {
                            "X-Ratelimit-Limit": {
                                "$ref": "#/components/headers/X-Ratelimit-Limit"
                            },
                            "X-Ratelimit-Remaining": {
                                "$ref": "#/components/headers/X-Ratelimit-Remaining"
                            },
                            "X-Ratelimit-Reset": {
                                "$ref": "#/components/headers/X-Ratelimit-Reset"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SettingRead"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/ErrorBadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/ErrorUnauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/ErrorForbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/ErrorNotFound"
                    },
                    "409": {
                        "$ref": "#/components/responses/ErrorConflict"
                    },
                    "429": {
                        "$ref": "#/components/responses/ErrorTooManyRequests"
                    },
                    "500": {
                        "$ref": "#/components/responses/ErrorInternalServerError"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#/components/parameters/PrettyResponse"
                },
                {
                    "$ref": "#/components/parameters/SettingID"
                },
                {
                    "$ref": "#/components/parameters/X-Request-Id"
                }
            ]
        },
        "/settings/{settingID}/admins": {
            "summary": "Administrators for the platform.",
            "description": "List a settings associated admins (User entity type). If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -\u003e edge, not entity -\u003e edge -\u003e edge -\u003e etc).",
            "get": {
                "tags": [
                    "Settings",
                    "Users"
                ],
                "summary": "Administrators for the platform.",
                "description": "List a settings associated admins (User entity type). If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -\u003e edge, not entity -\u003e edge -\u003e edge -\u003e etc).",
                "operationId": "listSettingAdmins",
                "parameters": [
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Sort entity results by the given field.",
                        "schema": {
                            "$ref": "#/components/schemas/UserSortableFields",
                            "default": "name"
                        }
                    },
                    {
                        "name": "order",
                        "in": "query",
                        "description": "Order the results in ascending or descending order.",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "asc",
                                "desc"
                            ],
                            "default": "asc"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/FilterOperation"
                    },
                    {
                        "$ref": "#/components/parameters/UserIDEQ"
                    },
                    {
                        "$ref": "#/components/parameters/UserIDNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/UserIDIn"
                    },
                    {
                        "$ref": "#/components/parameters/UserIDNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/UserCreatedAtGT"
                    },
                    {
                        "$ref": "#/components/parameters/UserCreatedAtLT"
                    },
                    {
                        "$ref": "#/components/parameters/UserUpdatedAtGT"
                    },
                    {
                        "$ref": "#/components/parameters/UserUpdatedAtLT"
                    },
                    {
                        "$ref": "#/components/parameters/UserNameEQ"
                    },
                    {
                        "$ref": "#/components/parameters/UserNameNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/UserNameIn"
                    },
                    {
                        "$ref": "#/components/parameters/UserNameNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/UserNameEqualFold"
                    },
                    {
                        "$ref": "#/components/parameters/UserNameContains"
                    },
                    {
                        "$ref": "#/components/parameters/UserNameContainsFold"
                    },
                    {
                        "$ref": "#/components/parameters/UserNameHasPrefix"
                    },
                    {
                        "$ref": "#/components/parameters/UserNameHasSuffix"
                    },
                    {
                        "$ref": "#/components/parameters/UserTypeEQ"
                    },
                    {
                        "$ref": "#/components/parameters/UserTypeNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/UserTypeIn"
                    },
                    {
                        "$ref": "#/components/parameters/UserTypeNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/UserDescriptionIsNil"
                    },
                    {
                        "$ref": "#/components/parameters/UserDescriptionContains"
                    },
                    {
                        "$ref": "#/components/parameters/UserDescriptionContainsFold"
                    },
                    {
                        "$ref": "#/components/parameters/UserEnabledEQ"
                    },
                    {
                        "$ref": "#/components/parameters/UserEmailEQ"
                    },
                    {
                        "$ref": "#/components/parameters/UserEmailNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/UserEmailIsNil"
                    },
                    {
                        "$ref": "#/components/parameters/UserEmailIn"
                    },
                    {
                        "$ref": "#/components/parameters/UserEmailNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/UserEmailEqualFold"
                    },
                    {
                        "$ref": "#/components/parameters/UserEmailContains"
                    },
                    {
                        "$ref": "#/components/parameters/UserEmailContainsFold"
                    },
                    {
                        "$ref": "#/components/parameters/UserEmailHasPrefix"
                    },
                    {
                        "$ref": "#/components/parameters/UserEmailHasSuffix"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeHasPet"
                    },
                    {
                        "$ref": "#/components/parameters/EdgePetIDEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgePetIDNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgePetIDIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgePetIDNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgePetNameEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgePetNameNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgePetNameIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgePetNameNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgePetNameEqualFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgePetNameContains"
                    },
                    {
                        "$ref": "#/components/parameters/EdgePetNameContainsFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgePetNameHasPrefix"
                    },
                    {
                        "$ref": "#/components/parameters/EdgePetNameHasSuffix"
                    },
                    {
                        "$ref": "#/components/parameters/EdgePetNicknamesIsNil"
                    },
                    {
                        "$ref": "#/components/parameters/EdgePetAgeEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgePetAgeNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgePetAgeGT"
                    },
                    {
                        "$ref": "#/components/parameters/EdgePetAgeLT"
                    },
                    {
                        "$ref": "#/components/parameters/EdgePetAgeIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgePetAgeNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgePetTypeEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgePetTypeNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgePetTypeIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgePetTypeNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeHasFollowedPet"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedPetIDEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedPetIDNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedPetIDIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedPetIDNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedPetNameEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedPetNameNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedPetNameIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedPetNameNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedPetNameEqualFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedPetNameContains"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedPetNameContainsFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedPetNameHasPrefix"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedPetNameHasSuffix"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedPetNicknamesIsNil"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedPetAgeEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedPetAgeNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedPetAgeGT"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedPetAgeLT"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedPetAgeIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedPetAgeNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedPetTypeEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedPetTypeNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedPetTypeIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedPetTypeNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeHasFriend"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendIDEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendIDNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendIDIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendIDNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendCreatedAtGT"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendCreatedAtLT"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendUpdatedAtGT"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendUpdatedAtLT"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendNameEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendNameNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendNameIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendNameNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendNameEqualFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendNameContains"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendNameContainsFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendNameHasPrefix"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendNameHasSuffix"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendTypeEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendTypeNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendTypeIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendTypeNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendDescriptionIsNil"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendDescriptionContains"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendDescriptionContainsFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendEnabledEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendEmailEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendEmailNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendEmailIsNil"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendEmailIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendEmailNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendEmailEqualFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendEmailContains"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendEmailContainsFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendEmailHasPrefix"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendEmailHasSuffix"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeHasFollowing"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeHasFriendship"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendshipIDEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendshipIDNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendshipIDIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendshipIDNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendshipUserIDEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendshipUserIDNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendshipUserIDIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendshipUserIDNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendshipFriendIDEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendshipFriendIDNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendshipFriendIDIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendshipFriendIDNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/UserFilterGroupSearchEQ"
                    },
                    {
                        "$ref": "#/components/parameters/UserFilterGroupSearchNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/UserFilterGroupSearchIn"
                    },
                    {
                        "$ref": "#/components/parameters/UserFilterGroupSearchNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/UserFilterGroupSearchEqualFold"
                    },
                    {
                        "$ref": "#/components/parameters/UserFilterGroupSearchContains"
                    },
                    {
                        "$ref": "#/components/parameters/UserFilterGroupSearchContainsFold"
                    },
                    {
                        "$ref": "#/components/parameters/UserFilterGroupSearchHasPrefix"
                    },
                    {
                        "$ref": "#/components/parameters/UserFilterGroupSearchHasSuffix"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The requested admins.",
                        "headers": {
                            "X-Ratelimit-Limit": {
                                "$ref": "#/components/headers/X-Ratelimit-Limit"
                            },
                            "X-Ratelimit-Remaining": {
                                "$ref": "#/components/headers/X-Ratelimit-Remaining"
                            },
                            "X-Ratelimit-Reset": {
                                "$ref": "#/components/headers/X-Ratelimit-Reset"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SettingAdminList"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/ErrorBadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/ErrorUnauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/ErrorForbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/ErrorNotFound"
                    },
                    "429": {
                        "$ref": "#/components/responses/ErrorTooManyRequests"
                    },
                    "500": {
                        "$ref": "#/components/responses/ErrorInternalServerError"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#/components/parameters/PrettyResponse"
                },
                {
                    "$ref": "#/components/parameters/SettingID"
                },
                {
                    "$ref": "#/components/parameters/X-Request-Id"
                }
            ]
        },
        "/users": {
            "summary": "List users",
            "description": "List User entities (including pagination, filtering, sorting, etc). If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -\u003e edge, not entity -\u003e edge -\u003e edge -\u003e etc).",
            "get": {
                "tags": [
                    "Users"
                ],
                "summary": "List users",
                "description": "List User entities (including pagination, filtering, sorting, etc). If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -\u003e edge, not entity -\u003e edge -\u003e edge -\u003e etc).",
                "operationId": "listUsers",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/Page"
                    },
                    {
                        "name": "per_page",
                        "in": "query",
                        "description": "The number of entities to retrieve per page.",
                        "schema": {
                            "type": "integer",
                            "maximum": 100,
                            "minimum": 1,
                            "default": 10
                        }
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Sort entity results by the given field.",
                        "schema": {
                            "$ref": "#/components/schemas/UserSortableFields",
                            "default": "name"
                        }
                    },
                    {
                        "name": "order",
                        "in": "query",
                        "description": "Order the results in ascending or descending order.",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "asc",
                                "desc"
                            ],
                            "default": "asc"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/FilterOperation"
                    },
                    {
                        "$ref": "#/components/parameters/UserIDEQ"
                    },
                    {
                        "$ref": "#/components/parameters/UserIDNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/UserIDIn"
                    },
                    {
                        "$ref": "#/components/parameters/UserIDNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/UserCreatedAtGT"
                    },
                    {
                        "$ref": "#/components/parameters/UserCreatedAtLT"
                    },
                    {
                        "$ref": "#/components/parameters/UserUpdatedAtGT"
                    },
                    {
                        "$ref": "#/components/parameters/UserUpdatedAtLT"
                    },
                    {
                        "$ref": "#/components/parameters/UserNameEQ"
                    },
                    {
                        "$ref": "#/components/parameters/UserNameNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/UserNameIn"
                    },
                    {
                        "$ref": "#/components/parameters/UserNameNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/UserNameEqualFold"
                    },
                    {
                        "$ref": "#/components/parameters/UserNameContains"
                    },
                    {
                        "$ref": "#/components/parameters/UserNameContainsFold"
                    },
                    {
                        "$ref": "#/components/parameters/UserNameHasPrefix"
                    },
                    {
                        "$ref": "#/components/parameters/UserNameHasSuffix"
                    },
                    {
                        "$ref": "#/components/parameters/UserTypeEQ"
                    },
                    {
                        "$ref": "#/components/parameters/UserTypeNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/UserTypeIn"
                    },
                    {
                        "$ref": "#/components/parameters/UserTypeNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/UserDescriptionIsNil"
                    },
                    {
                        "$ref": "#/components/parameters/UserDescriptionContains"
                    },
                    {
                        "$ref": "#/components/parameters/UserDescriptionContainsFold"
                    },
                    {
                        "$ref": "#/components/parameters/UserEnabledEQ"
                    },
                    {
                        "$ref": "#/components/parameters/UserEmailEQ"
                    },
                    {
                        "$ref": "#/components/parameters/UserEmailNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/UserEmailIsNil"
                    },
                    {
                        "$ref": "#/components/parameters/UserEmailIn"
                    },
                    {
                        "$ref": "#/components/parameters/UserEmailNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/UserEmailEqualFold"
                    },
                    {
                        "$ref": "#/components/parameters/UserEmailContains"
                    },
                    {
                        "$ref": "#/components/parameters/UserEmailContainsFold"
                    },
                    {
                        "$ref": "#/components/parameters/UserEmailHasPrefix"
                    },
                    {
                        "$ref": "#/components/parameters/UserEmailHasSuffix"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeHasPet"
                    },
                    {
                        "$ref": "#/components/parameters/EdgePetIDEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgePetIDNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgePetIDIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgePetIDNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgePetNameEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgePetNameNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgePetNameIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgePetNameNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgePetNameEqualFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgePetNameContains"
                    },
                    {
                        "$ref": "#/components/parameters/EdgePetNameContainsFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgePetNameHasPrefix"
                    },
                    {
                        "$ref": "#/components/parameters/EdgePetNameHasSuffix"
                    },
                    {
                        "$ref": "#/components/parameters/EdgePetNicknamesIsNil"
                    },
                    {
                        "$ref": "#/components/parameters/EdgePetAgeEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgePetAgeNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgePetAgeGT"
                    },
                    {
                        "$ref": "#/components/parameters/EdgePetAgeLT"
                    },
                    {
                        "$ref": "#/components/parameters/EdgePetAgeIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgePetAgeNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgePetTypeEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgePetTypeNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgePetTypeIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgePetTypeNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeHasFollowedPet"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedPetIDEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedPetIDNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedPetIDIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedPetIDNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedPetNameEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedPetNameNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedPetNameIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedPetNameNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedPetNameEqualFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedPetNameContains"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedPetNameContainsFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedPetNameHasPrefix"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedPetNameHasSuffix"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedPetNicknamesIsNil"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedPetAgeEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedPetAgeNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedPetAgeGT"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedPetAgeLT"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedPetAgeIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedPetAgeNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedPetTypeEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedPetTypeNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedPetTypeIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedPetTypeNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeHasFriend"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendIDEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendIDNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendIDIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendIDNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendCreatedAtGT"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendCreatedAtLT"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendUpdatedAtGT"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendUpdatedAtLT"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendNameEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendNameNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendNameIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendNameNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendNameEqualFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendNameContains"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendNameContainsFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendNameHasPrefix"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendNameHasSuffix"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendTypeEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendTypeNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendTypeIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendTypeNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendDescriptionIsNil"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendDescriptionContains"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendDescriptionContainsFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendEnabledEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendEmailEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendEmailNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendEmailIsNil"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendEmailIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendEmailNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendEmailEqualFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendEmailContains"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendEmailContainsFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendEmailHasPrefix"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendEmailHasSuffix"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeHasFollowing"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeHasFriendship"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendshipIDEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendshipIDNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendshipIDIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendshipIDNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendshipUserIDEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendshipUserIDNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendshipUserIDIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendshipUserIDNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendshipFriendIDEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendshipFriendIDNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendshipFriendIDIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendshipFriendIDNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/UserFilterGroupSearchEQ"
                    },
                    {
                        "$ref": "#/components/parameters/UserFilterGroupSearchNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/UserFilterGroupSearchIn"
                    },
                    {
                        "$ref": "#/components/parameters/UserFilterGroupSearchNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/UserFilterGroupSearchEqualFold"
                    },
                    {
                        "$ref": "#/components/parameters/UserFilterGroupSearchContains"
                    },
                    {
                        "$ref": "#/components/parameters/UserFilterGroupSearchContainsFold"
                    },
                    {
                        "$ref": "#/components/parameters/UserFilterGroupSearchHasPrefix"
                    },
                    {
                        "$ref": "#/components/parameters/UserFilterGroupSearchHasSuffix"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The requested User.",
                        "headers": {
                            "X-Ratelimit-Limit": {
                                "$ref": "#/components/headers/X-Ratelimit-Limit"
                            },
                            "X-Ratelimit-Remaining": {
                                "$ref": "#/components/headers/X-Ratelimit-Remaining"
                            },
                            "X-Ratelimit-Reset": {
                                "$ref": "#/components/headers/X-Ratelimit-Reset"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserList"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/ErrorBadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/ErrorUnauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/ErrorForbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/ErrorNotFound"
                    },
                    "429": {
                        "$ref": "#/components/responses/ErrorTooManyRequests"
                    },
                    "500": {
                        "$ref": "#/components/responses/ErrorInternalServerError"
                    }
                }
            },
            "post": {
                "tags": [
                    "Users"
                ],
                "summary": "Create a new user",
                "description": "Create a new User entity. If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -\u003e edge, not entity -\u003e edge -\u003e edge -\u003e etc).",
                "operationId": "createUser",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UserCreate"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "The created User entity.",
                        "headers": {
                            "X-Ratelimit-Limit": {
                                "$ref": "#/components/headers/X-Ratelimit-Limit"
                            },
                            "X-Ratelimit-Remaining": {
                                "$ref": "#/components/headers/X-Ratelimit-Remaining"
                            },
                            "X-Ratelimit-Reset": {
                                "$ref": "#/components/headers/X-Ratelimit-Reset"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserRead"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/ErrorBadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/ErrorUnauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/ErrorForbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/ErrorNotFound"
                    },
                    "409": {
                        "$ref": "#/components/responses/ErrorConflict"
                    },
                    "429": {
                        "$ref": "#/components/responses/ErrorTooManyRequests"
                    },
                    "500": {
                        "$ref": "#/components/responses/ErrorInternalServerError"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#/components/parameters/PrettyResponse"
                },
                {
                    "$ref": "#/components/parameters/X-Request-Id"
                }
            ]
        },
        "/users/{userID}": {
            "summary": "Operate on a single User entity",
            "description": "Operate on a single User entity by its ID.",
            "get": {
                "tags": [
                    "Users"
                ],
                "summary": "Retrieve a user",
                "description": "Retrieve a single User entity by its ID. If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -\u003e edge, not entity -\u003e edge -\u003e edge -\u003e etc).",
                "operationId": "getUser",
                "responses": {
                    "200": {
                        "description": "The requested User entity.",
                        "headers": {
                            "X-Ratelimit-Limit": {
                                "$ref": "#/components/headers/X-Ratelimit-Limit"
                            },
                            "X-Ratelimit-Remaining": {
                                "$ref": "#/components/headers/X-Ratelimit-Remaining"
                            },
                            "X-Ratelimit-Reset": {
                                "$ref": "#/components/headers/X-Ratelimit-Reset"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserRead"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/ErrorBadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/ErrorUnauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/ErrorForbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/ErrorNotFound"
                    },
                    "429": {
                        "$ref": "#/components/responses/ErrorTooManyRequests"
                    },
                    "500": {
                        "$ref": "#/components/responses/ErrorInternalServerError"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Users"
                ],
                "summary": "Delete a user",
                "description": "Delete a single User entity by its ID.",
                "operationId": "deleteUser",
                "responses": {
                    "204": {
                        "description": "The requested User entity.",
                        "headers": {
                            "X-Ratelimit-Limit": {
                                "$ref": "#/components/headers/X-Ratelimit-Limit"
                            },
                            "X-Ratelimit-Remaining": {
                                "$ref": "#/components/headers/X-Ratelimit-Remaining"
                            },
                            "X-Ratelimit-Reset": {
                                "$ref": "#/components/headers/X-Ratelimit-Reset"
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/ErrorBadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/ErrorUnauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/ErrorForbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/ErrorNotFound"
                    },
                    "429": {
                        "$ref": "#/components/responses/ErrorTooManyRequests"
                    },
                    "500": {
                        "$ref": "#/components/responses/ErrorInternalServerError"
                    }
                }
            },
            "patch": {
                "tags": [
                    "Users"
                ],
                "summary": "Update a user",
                "description": "Update an existing User entity. If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -\u003e edge, not entity -\u003e edge -\u003e edge -\u003e etc).",
                "operationId": "updateUser",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UserUpdate"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "The update User entity.",
                        "headers": {
                            "X-Ratelimit-Limit": {
                                "$ref": "#/components/headers/X-Ratelimit-Limit"
                            },
                            "X-Ratelimit-Remaining": {
                                "$ref": "#/components/headers/X-Ratelimit-Remaining"
                            },
                            "X-Ratelimit-Reset": {
                                "$ref": "#/components/headers/X-Ratelimit-Reset"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserRead"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/ErrorBadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/ErrorUnauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/ErrorForbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/ErrorNotFound"
                    },
                    "409": {
                        "$ref": "#/components/responses/ErrorConflict"
                    },
                    "429": {
                        "$ref": "#/components/responses/ErrorTooManyRequests"
                    },
                    "500": {
                        "$ref": "#/components/responses/ErrorInternalServerError"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#/components/parameters/PrettyResponse"
                },
                {
                    "$ref": "#/components/parameters/UserID"
                },
                {
                    "$ref": "#/components/parameters/X-Request-Id"
                }
            ]
        },
        "/users/{userID}/followed-pets": {
            "summary": "Pets that the user is following.",
            "description": "List a users associated followedPets (Pet entity type). If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -\u003e edge, not entity -\u003e edge -\u003e edge -\u003e etc).",
            "get": {
                "tags": [
                    "Users",
                    "Pets"
                ],
                "summary": "Pets that the user is following.",
                "description": "List a users associated followedPets (Pet entity type). If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -\u003e edge, not entity -\u003e edge -\u003e edge -\u003e etc).",
                "operationId": "listUserFollowedPets",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/Page"
                    },
                    {
                        "name": "per_page",
                        "in": "query",
                        "description": "The number of entities to retrieve per page.",
                        "schema": {
                            "type": "integer",
                            "maximum": 100,
                            "minimum": 1,
                            "default": 10
                        }
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Sort entity results by the given field.",
                        "schema": {
                            "$ref": "#/components/schemas/PetSortableFields",
                            "default": "name"
                        }
                    },
                    {
                        "name": "order",
                        "in": "query",
                        "description": "Order the results in ascending or descending order.",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "asc",
                                "desc"
                            ],
                            "default": "asc"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/FilterOperation"
                    },
                    {
                        "$ref": "#/components/parameters/PetIDEQ"
                    },
                    {
                        "$ref": "#/components/parameters/PetIDNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/PetIDIn"
                    },
                    {
                        "$ref": "#/components/parameters/PetIDNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/PetNameEQ"
                    },
                    {
                        "$ref": "#/components/parameters/PetNameNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/PetNameIn"
                    },
                    {
                        "$ref": "#/components/parameters/PetNameNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/PetNameEqualFold"
                    },
                    {
                        "$ref": "#/components/parameters/PetNameContains"
                    },
                    {
                        "$ref": "#/components/parameters/PetNameContainsFold"
                    },
                    {
                        "$ref": "#/components/parameters/PetNameHasPrefix"
                    },
                    {
                        "$ref": "#/components/parameters/PetNameHasSuffix"
                    },
                    {
                        "$ref": "#/components/parameters/PetNicknamesIsNil"
                    },
                    {
                        "$ref": "#/components/parameters/PetAgeEQ"
                    },
                    {
                        "$ref": "#/components/parameters/PetAgeNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/PetAgeGT"
                    },
                    {
                        "$ref": "#/components/parameters/PetAgeLT"
                    },
                    {
                        "$ref": "#/components/parameters/PetAgeIn"
                    },
                    {
                        "$ref": "#/components/parameters/PetAgeNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/PetTypeEQ"
                    },
                    {
                        "$ref": "#/components/parameters/PetTypeNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/PetTypeIn"
                    },
                    {
                        "$ref": "#/components/parameters/PetTypeNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeHasCategory"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeCategoryIDEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeCategoryIDNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeCategoryIDIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeCategoryIDNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeCategoryCreatedAtGT"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeCategoryCreatedAtLT"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeCategoryUpdatedAtGT"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeCategoryUpdatedAtLT"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeHasOwner"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerIDEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerIDNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerIDIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerIDNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerCreatedAtGT"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerCreatedAtLT"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerUpdatedAtGT"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerUpdatedAtLT"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerNameEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerNameNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerNameIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerNameNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerNameEqualFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerNameContains"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerNameContainsFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerNameHasPrefix"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerNameHasSuffix"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerTypeEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerTypeNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerTypeIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerTypeNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerDescriptionIsNil"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerDescriptionContains"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerDescriptionContainsFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerEnabledEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerEmailEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerEmailNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerEmailIsNil"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerEmailIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerEmailNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerEmailEqualFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerEmailContains"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerEmailContainsFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerEmailHasPrefix"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerEmailHasSuffix"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeHasFriend"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendIDEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendIDNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendIDIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendIDNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendNameEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendNameNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendNameIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendNameNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendNameEqualFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendNameContains"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendNameContainsFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendNameHasPrefix"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendNameHasSuffix"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendNicknamesIsNil"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendAgeEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendAgeNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendAgeGT"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendAgeLT"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendAgeIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendAgeNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendTypeEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendTypeNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendTypeIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendTypeNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeHasFollowedBy"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedByIDEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedByIDNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedByIDIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedByIDNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedByCreatedAtGT"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedByCreatedAtLT"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedByUpdatedAtGT"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedByUpdatedAtLT"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedByNameEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedByNameNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedByNameIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedByNameNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedByNameEqualFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedByNameContains"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedByNameContainsFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedByNameHasPrefix"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedByNameHasSuffix"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedByTypeEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedByTypeNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedByTypeIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedByTypeNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedByDescriptionIsNil"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedByDescriptionContains"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedByDescriptionContainsFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedByEnabledEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedByEmailEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedByEmailNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedByEmailIsNil"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedByEmailIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedByEmailNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedByEmailEqualFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedByEmailContains"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedByEmailContainsFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedByEmailHasPrefix"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedByEmailHasSuffix"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeHasFollowing"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The requested followedPets.",
                        "headers": {
                            "X-Ratelimit-Limit": {
                                "$ref": "#/components/headers/X-Ratelimit-Limit"
                            },
                            "X-Ratelimit-Remaining": {
                                "$ref": "#/components/headers/X-Ratelimit-Remaining"
                            },
                            "X-Ratelimit-Reset": {
                                "$ref": "#/components/headers/X-Ratelimit-Reset"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PetList"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/ErrorBadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/ErrorUnauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/ErrorForbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/ErrorNotFound"
                    },
                    "429": {
                        "$ref": "#/components/responses/ErrorTooManyRequests"
                    },
                    "500": {
                        "$ref": "#/components/responses/ErrorInternalServerError"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#/components/parameters/PrettyResponse"
                },
                {
                    "$ref": "#/components/parameters/UserID"
                },
                {
                    "$ref": "#/components/parameters/X-Request-Id"
                }
            ]
        },
        "/users/{userID}/friends": {
            "summary": "Friends of the user.",
            "description": "List a users associated friends (User entity type). If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -\u003e edge, not entity -\u003e edge -\u003e edge -\u003e etc).",
            "get": {
                "tags": [
                    "Users"
                ],
                "summary": "Friends of the user.",
                "description": "List a users associated friends (User entity type). If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -\u003e edge, not entity -\u003e edge -\u003e edge -\u003e etc).",
                "operationId": "listUserFriends",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/Page"
                    },
                    {
                        "name": "per_page",
                        "in": "query",
                        "description": "The number of entities to retrieve per page.",
                        "schema": {
                            "type": "integer",
                            "maximum": 100,
                            "minimum": 1,
                            "default": 10
                        }
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Sort entity results by the given field.",
                        "schema": {
                            "$ref": "#/components/schemas/UserSortableFields",
                            "default": "name"
                        }
                    },
                    {
                        "name": "order",
                        "in": "query",
                        "description": "Order the results in ascending or descending order.",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "asc",
                                "desc"
                            ],
                            "default": "asc"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/FilterOperation"
                    },
                    {
                        "$ref": "#/components/parameters/UserIDEQ"
                    },
                    {
                        "$ref": "#/components/parameters/UserIDNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/UserIDIn"
                    },
                    {
                        "$ref": "#/components/parameters/UserIDNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/UserCreatedAtGT"
                    },
                    {
                        "$ref": "#/components/parameters/UserCreatedAtLT"
                    },
                    {
                        "$ref": "#/components/parameters/UserUpdatedAtGT"
                    },
                    {
                        "$ref": "#/components/parameters/UserUpdatedAtLT"
                    },
                    {
                        "$ref": "#/components/parameters/UserNameEQ"
                    },
                    {
                        "$ref": "#/components/parameters/UserNameNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/UserNameIn"
                    },
                    {
                        "$ref": "#/components/parameters/UserNameNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/UserNameEqualFold"
                    },
                    {
                        "$ref": "#/components/parameters/UserNameContains"
                    },
                    {
                        "$ref": "#/components/parameters/UserNameContainsFold"
                    },
                    {
                        "$ref": "#/components/parameters/UserNameHasPrefix"
                    },
                    {
                        "$ref": "#/components/parameters/UserNameHasSuffix"
                    },
                    {
                        "$ref": "#/components/parameters/UserTypeEQ"
                    },
                    {
                        "$ref": "#/components/parameters/UserTypeNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/UserTypeIn"
                    },
                    {
                        "$ref": "#/components/parameters/UserTypeNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/UserDescriptionIsNil"
                    },
                    {
                        "$ref": "#/components/parameters/UserDescriptionContains"
                    },
                    {
                        "$ref": "#/components/parameters/UserDescriptionContainsFold"
                    },
                    {
                        "$ref": "#/components/parameters/UserEnabledEQ"
                    },
                    {
                        "$ref": "#/components/parameters/UserEmailEQ"
                    },
                    {
                        "$ref": "#/components/parameters/UserEmailNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/UserEmailIsNil"
                    },
                    {
                        "$ref": "#/components/parameters/UserEmailIn"
                    },
                    {
                        "$ref": "#/components/parameters/UserEmailNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/UserEmailEqualFold"
                    },
                    {
                        "$ref": "#/components/parameters/UserEmailContains"
                    },
                    {
                        "$ref": "#/components/parameters/UserEmailContainsFold"
                    },
                    {
                        "$ref": "#/components/parameters/UserEmailHasPrefix"
                    },
                    {
                        "$ref": "#/components/parameters/UserEmailHasSuffix"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeHasPet"
                    },
                    {
                        "$ref": "#/components/parameters/EdgePetIDEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgePetIDNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgePetIDIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgePetIDNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgePetNameEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgePetNameNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgePetNameIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgePetNameNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgePetNameEqualFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgePetNameContains"
                    },
                    {
                        "$ref": "#/components/parameters/EdgePetNameContainsFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgePetNameHasPrefix"
                    },
                    {
                        "$ref": "#/components/parameters/EdgePetNameHasSuffix"
                    },
                    {
                        "$ref": "#/components/parameters/EdgePetNicknamesIsNil"
                    },
                    {
                        "$ref": "#/components/parameters/EdgePetAgeEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgePetAgeNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgePetAgeGT"
                    },
                    {
                        "$ref": "#/components/parameters/EdgePetAgeLT"
                    },
                    {
                        "$ref": "#/components/parameters/EdgePetAgeIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgePetAgeNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgePetTypeEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgePetTypeNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgePetTypeIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgePetTypeNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeHasFollowedPet"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedPetIDEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedPetIDNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedPetIDIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedPetIDNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedPetNameEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedPetNameNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedPetNameIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedPetNameNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedPetNameEqualFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedPetNameContains"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedPetNameContainsFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedPetNameHasPrefix"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedPetNameHasSuffix"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedPetNicknamesIsNil"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedPetAgeEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedPetAgeNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedPetAgeGT"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedPetAgeLT"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedPetAgeIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedPetAgeNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedPetTypeEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedPetTypeNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedPetTypeIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedPetTypeNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeHasFriend"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendIDEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendIDNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendIDIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendIDNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendCreatedAtGT"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendCreatedAtLT"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendUpdatedAtGT"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendUpdatedAtLT"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendNameEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendNameNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendNameIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendNameNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendNameEqualFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendNameContains"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendNameContainsFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendNameHasPrefix"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendNameHasSuffix"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendTypeEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendTypeNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendTypeIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendTypeNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendDescriptionIsNil"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendDescriptionContains"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendDescriptionContainsFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendEnabledEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendEmailEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendEmailNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendEmailIsNil"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendEmailIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendEmailNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendEmailEqualFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendEmailContains"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendEmailContainsFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendEmailHasPrefix"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendEmailHasSuffix"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeHasFollowing"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeHasFriendship"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendshipIDEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendshipIDNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendshipIDIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendshipIDNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendshipUserIDEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendshipUserIDNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendshipUserIDIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendshipUserIDNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendshipFriendIDEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendshipFriendIDNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendshipFriendIDIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendshipFriendIDNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/UserFilterGroupSearchEQ"
                    },
                    {
                        "$ref": "#/components/parameters/UserFilterGroupSearchNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/UserFilterGroupSearchIn"
                    },
                    {
                        "$ref": "#/components/parameters/UserFilterGroupSearchNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/UserFilterGroupSearchEqualFold"
                    },
                    {
                        "$ref": "#/components/parameters/UserFilterGroupSearchContains"
                    },
                    {
                        "$ref": "#/components/parameters/UserFilterGroupSearchContainsFold"
                    },
                    {
                        "$ref": "#/components/parameters/UserFilterGroupSearchHasPrefix"
                    },
                    {
                        "$ref": "#/components/parameters/UserFilterGroupSearchHasSuffix"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The requested friends.",
                        "headers": {
                            "X-Ratelimit-Limit": {
                                "$ref": "#/components/headers/X-Ratelimit-Limit"
                            },
                            "X-Ratelimit-Remaining": {
                                "$ref": "#/components/headers/X-Ratelimit-Remaining"
                            },
                            "X-Ratelimit-Reset": {
                                "$ref": "#/components/headers/X-Ratelimit-Reset"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserList"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/ErrorBadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/ErrorUnauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/ErrorForbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/ErrorNotFound"
                    },
                    "429": {
                        "$ref": "#/components/responses/ErrorTooManyRequests"
                    },
                    "500": {
                        "$ref": "#/components/responses/ErrorInternalServerError"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#/components/parameters/PrettyResponse"
                },
                {
                    "$ref": "#/components/parameters/UserID"
                },
                {
                    "$ref": "#/components/parameters/X-Request-Id"
                }
            ]
        },
        "/users/{userID}/friendships": {
            "summary": "List a users associated friendships",
            "description": "List a users associated friendships (Friendship entity type). If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -\u003e edge, not entity -\u003e edge -\u003e edge -\u003e etc).",
            "get": {
                "tags": [
                    "Users",
                    "Friendships"
                ],
                "summary": "List a users associated friendships",
                "description": "List a users associated friendships (Friendship entity type). If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -\u003e edge, not entity -\u003e edge -\u003e edge -\u003e etc).",
                "operationId": "listUserFriendships",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/Page"
                    },
                    {
                        "name": "per_page",
                        "in": "query",
                        "description": "The number of entities to retrieve per page.",
                        "schema": {
                            "type": "integer",
                            "maximum": 100,
                            "minimum": 1,
                            "default": 10
                        }
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Sort entity results by the given field.",
                        "schema": {
                            "$ref": "#/components/schemas/FriendshipSortableFields",
                            "default": "id"
                        }
                    },
                    {
                        "name": "order",
                        "in": "query",
                        "description": "Order the results in ascending or descending order.",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "asc",
                                "desc"
                            ],
                            "default": "asc"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/FilterOperation"
                    },
                    {
                        "$ref": "#/components/parameters/FriendshipIDEQ"
                    },
                    {
                        "$ref": "#/components/parameters/FriendshipIDNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/FriendshipIDIn"
                    },
                    {
                        "$ref": "#/components/parameters/FriendshipIDNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/FriendshipUserIDEQ"
                    },
                    {
                        "$ref": "#/components/parameters/FriendshipUserIDNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/FriendshipUserIDIn"
                    },
                    {
                        "$ref": "#/components/parameters/FriendshipUserIDNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/FriendshipFriendIDEQ"
                    },
                    {
                        "$ref": "#/components/parameters/FriendshipFriendIDNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/FriendshipFriendIDIn"
                    },
                    {
                        "$ref": "#/components/parameters/FriendshipFriendIDNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeHasUser"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeUserCreatedAtGT"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeUserCreatedAtLT"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeUserUpdatedAtGT"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeUserUpdatedAtLT"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeUserNameEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeUserNameNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeUserNameIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeUserNameNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeUserNameEqualFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeUserNameContains"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeUserNameContainsFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeUserNameHasPrefix"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeUserNameHasSuffix"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeUserTypeEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeUserTypeNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeUserTypeIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeUserTypeNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeUserDescriptionIsNil"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeUserDescriptionContains"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeUserDescriptionContainsFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeUserEnabledEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeUserEmailEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeUserEmailNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeUserEmailIsNil"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeUserEmailIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeUserEmailNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeUserEmailEqualFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeUserEmailContains"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeUserEmailContainsFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeUserEmailHasPrefix"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeUserEmailHasSuffix"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeHasFriend"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendCreatedAtGT"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendCreatedAtLT"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendUpdatedAtGT"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendUpdatedAtLT"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendNameEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendNameNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendNameIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendNameNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendNameEqualFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendNameContains"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendNameContainsFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendNameHasPrefix"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendNameHasSuffix"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendTypeEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendTypeNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendTypeIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendTypeNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendDescriptionIsNil"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendDescriptionContains"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendDescriptionContainsFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendEnabledEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendEmailEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendEmailNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendEmailIsNil"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendEmailIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendEmailNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendEmailEqualFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendEmailContains"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendEmailContainsFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendEmailHasPrefix"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendEmailHasSuffix"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The requested friendships.",
                        "headers": {
                            "X-Ratelimit-Limit": {
                                "$ref": "#/components/headers/X-Ratelimit-Limit"
                            },
                            "X-Ratelimit-Remaining": {
                                "$ref": "#/components/headers/X-Ratelimit-Remaining"
                            },
                            "X-Ratelimit-Reset": {
                                "$ref": "#/components/headers/X-Ratelimit-Reset"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FriendshipList"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/ErrorBadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/ErrorUnauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/ErrorForbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/ErrorNotFound"
                    },
                    "429": {
                        "$ref": "#/components/responses/ErrorTooManyRequests"
                    },
                    "500": {
                        "$ref": "#/components/responses/ErrorInternalServerError"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#/components/parameters/PrettyResponse"
                },
                {
                    "$ref": "#/components/parameters/UserID"
                },
                {
                    "$ref": "#/components/parameters/X-Request-Id"
                }
            ]
        },
        "/users/{userID}/pets": {
            "summary": "Pets owned by the user.",
            "description": "List a users associated pets (Pet entity type). If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -\u003e edge, not entity -\u003e edge -\u003e edge -\u003e etc).",
            "get": {
                "tags": [
                    "Users",
                    "Pets"
                ],
                "summary": "Pets owned by the user.",
                "description": "List a users associated pets (Pet entity type). If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -\u003e edge, not entity -\u003e edge -\u003e edge -\u003e etc).",
                "operationId": "listUserPets",
                "parameters": [
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Sort entity results by the given field.",
                        "schema": {
                            "$ref": "#/components/schemas/PetSortableFields",
                            "default": "name"
                        }
                    },
                    {
                        "name": "order",
                        "in": "query",
                        "description": "Order the results in ascending or descending order.",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "asc",
                                "desc"
                            ],
                            "default": "asc"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/FilterOperation"
                    },
                    {
                        "$ref": "#/components/parameters/PetIDEQ"
                    },
                    {
                        "$ref": "#/components/parameters/PetIDNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/PetIDIn"
                    },
                    {
                        "$ref": "#/components/parameters/PetIDNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/PetNameEQ"
                    },
                    {
                        "$ref": "#/components/parameters/PetNameNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/PetNameIn"
                    },
                    {
                        "$ref": "#/components/parameters/PetNameNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/PetNameEqualFold"
                    },
                    {
                        "$ref": "#/components/parameters/PetNameContains"
                    },
                    {
                        "$ref": "#/components/parameters/PetNameContainsFold"
                    },
                    {
                        "$ref": "#/components/parameters/PetNameHasPrefix"
                    },
                    {
                        "$ref": "#/components/parameters/PetNameHasSuffix"
                    },
                    {
                        "$ref": "#/components/parameters/PetNicknamesIsNil"
                    },
                    {
                        "$ref": "#/components/parameters/PetAgeEQ"
                    },
                    {
                        "$ref": "#/components/parameters/PetAgeNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/PetAgeGT"
                    },
                    {
                        "$ref": "#/components/parameters/PetAgeLT"
                    },
                    {
                        "$ref": "#/components/parameters/PetAgeIn"
                    },
                    {
                        "$ref": "#/components/parameters/PetAgeNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/PetTypeEQ"
                    },
                    {
                        "$ref": "#/components/parameters/PetTypeNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/PetTypeIn"
                    },
                    {
                        "$ref": "#/components/parameters/PetTypeNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeHasCategory"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeCategoryIDEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeCategoryIDNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeCategoryIDIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeCategoryIDNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeCategoryCreatedAtGT"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeCategoryCreatedAtLT"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeCategoryUpdatedAtGT"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeCategoryUpdatedAtLT"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeHasOwner"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerIDEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerIDNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerIDIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerIDNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerCreatedAtGT"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerCreatedAtLT"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerUpdatedAtGT"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerUpdatedAtLT"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerNameEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerNameNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerNameIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerNameNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerNameEqualFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerNameContains"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerNameContainsFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerNameHasPrefix"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerNameHasSuffix"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerTypeEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerTypeNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerTypeIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerTypeNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerDescriptionIsNil"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerDescriptionContains"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerDescriptionContainsFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerEnabledEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerEmailEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerEmailNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerEmailIsNil"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerEmailIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerEmailNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerEmailEqualFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerEmailContains"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerEmailContainsFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerEmailHasPrefix"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeOwnerEmailHasSuffix"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeHasFriend"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendIDEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendIDNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendIDIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendIDNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendNameEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendNameNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendNameIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendNameNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendNameEqualFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendNameContains"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendNameContainsFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendNameHasPrefix"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendNameHasSuffix"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendNicknamesIsNil"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendAgeEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendAgeNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendAgeGT"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendAgeLT"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendAgeIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendAgeNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendTypeEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendTypeNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendTypeIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFriendTypeNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeHasFollowedBy"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedByIDEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedByIDNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedByIDIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedByIDNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedByCreatedAtGT"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedByCreatedAtLT"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedByUpdatedAtGT"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedByUpdatedAtLT"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedByNameEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedByNameNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedByNameIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedByNameNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedByNameEqualFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedByNameContains"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedByNameContainsFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedByNameHasPrefix"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedByNameHasSuffix"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedByTypeEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedByTypeNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedByTypeIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedByTypeNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedByDescriptionIsNil"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedByDescriptionContains"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedByDescriptionContainsFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedByEnabledEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedByEmailEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedByEmailNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedByEmailIsNil"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedByEmailIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedByEmailNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedByEmailEqualFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedByEmailContains"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedByEmailContainsFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedByEmailHasPrefix"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeFollowedByEmailHasSuffix"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeHasFollowing"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The requested pets.",
                        "headers": {
                            "X-Ratelimit-Limit": {
                                "$ref": "#/components/headers/X-Ratelimit-Limit"
                            },
                            "X-Ratelimit-Remaining": {
                                "$ref": "#/components/headers/X-Ratelimit-Remaining"
                            },
                            "X-Ratelimit-Reset": {
                                "$ref": "#/components/headers/X-Ratelimit-Reset"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserPetList"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/ErrorBadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/ErrorUnauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/ErrorForbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/ErrorNotFound"
                    },
                    "429": {
                        "$ref": "#/components/responses/ErrorTooManyRequests"
                    },
                    "500": {
                        "$ref": "#/components/responses/ErrorInternalServerError"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#/components/parameters/PrettyResponse"
                },
                {
                    "$ref": "#/components/parameters/UserID"
                },
                {
                    "$ref": "#/components/parameters/X-Request-Id"
                }
            ]
        },
        "/version": {
            "get": {
                "tags": [
                    "Meta"
                ],
                "summary": "Get service version",
                "description": "Get the version of the service.",
                "operationId": "getServiceVersion",
                "responses": {
                    "200": {
                        "description": "Service version information was found.",
                        "headers": {
                            "X-Ratelimit-Limit": {
                                "$ref": "#/components/headers/X-Ratelimit-Limit"
                            },
                            "X-Ratelimit-Remaining": {
                                "$ref": "#/components/headers/X-Ratelimit-Remaining"
                            },
                            "X-Ratelimit-Reset": {
                                "$ref": "#/components/headers/X-Ratelimit-Reset"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "name": {
                                            "description": "Name of cli tool.",
                                            "type": "string"
                                        },
                                        "build_version": {
                                            "description": "Build version.",
                                            "type": "string"
                                        },
                                        "build_commit": {
                                            "description": "VCS commit SHA.",
                                            "type": "string"
                                        },
                                        "build_date": {
                                            "description": "VCS commit date.",
                                            "type": "string"
                                        },
                                        "command": {
                                            "description": "Executable name where the command was called from.",
                                            "type": "string"
                                        },
                                        "go_version": {
                                            "description": "Version of Go that produced this binary.",
                                            "type": "string"
                                        },
                                        "os": {
                                            "description": "Operating system for this build.",
                                            "type": "string"
                                        },
                                        "arch": {
                                            "description": "CPU Architecture for this build.",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "name",
                                        "go_version",
                                        "os",
                                        "arch"
                                    ]
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/ErrorBadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/ErrorUnauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/ErrorForbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/ErrorNotFound"
                    },
                    "429": {
                        "$ref": "#/components/responses/ErrorTooManyRequests"
                    },
                    "500": {
                        "$ref": "#/components/responses/ErrorInternalServerError"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#/components/parameters/X-Request-Id"
                }
            ]
        }
    },
    "components": {
        "schemas": {
            "Category": {
                "description": "A single Category entity.",
                "type": "object",
                "properties": {
                    "id": {
                        "description": "The ID of the Category entity.",
                        "type": "integer"
                    },
                    "created_at": {
                        "description": "Time in which the resource was initially created.",
                        "type": "string",
                        "format": "date-time"
                    },
                    "updated_at": {
                        "description": "Time that the resource was last updated.",
                        "type": "string",
                        "format": "date-time"
                    },
                    "name": {
                        "type": "string"
                    },
                    "readonly": {
                        "type": "string"
                    },
                    "nillable": {
                        "type": "string",
                        "nullable": true,
                        "default": "test"
                    },
                    "strings": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/CategoryStringsEnum"
                        }
                    },
                    "ints": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        }
                    }
                },
                "required": [
                    "id",
                    "created_at",
                    "updated_at",
                    "name",
                    "readonly",
                    "nillable"
                ]
            },
            "CategoryCreate": {
                "description": "A single Category entity and the fields that can be created/updated.",
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "nillable": {
                        "type": "string",
                        "nullable": true,
                        "default": "test"
                    },
                    "strings": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/CategoryStringsEnum"
                        }
                    },
                    "ints": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        }
                    },
                    "pets": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        }
                    }
                },
                "required": [
                    "name"
                ]
            },
            "CategoryList": {
                "description": "A paginated result set of Category entities. Includes eager-loaded edges (if any) for each entity.",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/PagedResponse"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "content": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/CategoryRead"
                                }
                            }
                        },
                        "required": [
                            "content"
                        ]
                    }
                ]
            },
            "CategoryRead": {
                "$ref": "#/components/schemas/Category"
            },
            "CategorySortableFields": {
                "description": "All potential sortable fields for Category entities.",
                "type": "string",
                "enum": [
                    "created_at",
                    "id",
                    "pets.age.sum",
                    "pets.count",
                    "random",
                    "updated_at"
                ],
                "default": "id"
            },
            "CategoryStringsEnum": {
                "type": "string",
                "enum": [
                    "FOO",
                    "BAR",
                    "BAZ"
                ]
            },
            "CategoryUpdate": {
                "description": "A single Category entity and the fields that can be created/updated.",
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "nillable": {
                        "type": "string",
                        "nullable": true,
                        "default": "test"
                    },
                    "strings": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/CategoryStringsEnum"
                        }
                    },
                    "ints": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        }
                    },
                    "add_pets": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        }
                    },
                    "remove_pets": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        }
                    }
                }
            },
            "ErrorBadRequest": {
                "type": "object",
                "properties": {
                    "error": {
                        "description": "The underlying error, which may be masked when debugging is disabled.",
                        "type": "string"
                    },
                    "type": {
                        "description": "A summary of the error code based off the HTTP status code or application error code.",
                        "type": "string",
                        "example": "Bad Request"
                    },
                    "code": {
                        "description": "The HTTP status code or other internal application error code.",
                        "type": "integer",
                        "example": 400
                    },
                    "request_id": {
                        "description": "The unique request ID for this error.",
                        "type": "string",
                        "example": "cb6f6f9c1783cdc9752cee2a4e95dd4c"
                    },
                    "timestamp": {
                        "description": "The timestamp of the error, in RFC3339 format.",
                        "type": "string",
                        "format": "date-time",
                        "example": "2024-04-26T12:19:01Z"
                    }
                },
                "required": [
                    "error",
                    "type",
                    "code",
                    "timestamp"
                ]
            },
            "ErrorConflict": {
                "type": "object",
                "properties": {
                    "error": {
                        "description": "The underlying error, which may be masked when debugging is disabled.",
                        "type": "string"
                    },
                    "type": {
                        "description": "A summary of the error code based off the HTTP status code or application error code.",
                        "type": "string",
                        "example": "Conflict"
                    },
                    "code": {
                        "description": "The HTTP status code or other internal application error code.",
                        "type": "integer",
                        "example": 409
                    },
                    "request_id": {
                        "description": "The unique request ID for this error.",
                        "type": "string",
                        "example": "cb6f6f9c1783cdc9752cee2a4e95dd4c"
                    },
                    "timestamp": {
                        "description": "The timestamp of the error, in RFC3339 format.",
                        "type": "string",
                        "format": "date-time",
                        "example": "2024-04-26T12:19:01Z"
                    }
                },
                "required": [
                    "error",
                    "type",
                    "code",
                    "timestamp"
                ]
            },
            "ErrorForbidden": {
                "type": "object",
                "properties": {
                    "error": {
                        "description": "The underlying error, which may be masked when debugging is disabled.",
                        "type": "string"
                    },
                    "type": {
                        "description": "A summary of the error code based off the HTTP status code or application error code.",
                        "type": "string",
                        "example": "Forbidden"
                    },
                    "code": {
                        "description": "The HTTP status code or other internal application error code.",
                        "type": "integer",
                        "example": 403
                    },
                    "request_id": {
                        "description": "The unique request ID for this error.",
                        "type": "string",
                        "example": "cb6f6f9c1783cdc9752cee2a4e95dd4c"
                    },
                    "timestamp": {
                        "description": "The timestamp of the error, in RFC3339 format.",
                        "type": "string",
                        "format": "date-time",
                        "example": "2024-04-26T12:19:01Z"
                    }
                },
                "required": [
                    "error",
                    "type",
                    "code",
                    "timestamp"
                ]
            },
            "ErrorInternalServerError": {
                "type": "object",
                "properties": {
                    "error": {
                        "description": "The underlying error, which may be masked when debugging is disabled.",
                        "type": "string"
                    },
                    "type": {
                        "description": "A summary of the error code based off the HTTP status code or application error code.",
                        "type": "string",
                        "example": "Internal Server Error"
                    },
                    "code": {
                        "description": "The HTTP status code or other internal application error code.",
                        "type": "integer",
                        "example": 500
                    },
                    "request_id": {
                        "description": "The unique request ID for this error.",
                        "type": "string",
                        "example": "cb6f6f9c1783cdc9752cee2a4e95dd4c"
                    },
                    "timestamp": {
                        "description": "The timestamp of the error, in RFC3339 format.",
                        "type": "string",
                        "format": "date-time",
                        "example": "2024-04-26T12:19:01Z"
                    }
                },
                "required": [
                    "error",
                    "type",
                    "code",
                    "timestamp"
                ]
            },
            "ErrorNotFound": {
                "type": "object",
                "properties": {
                    "error": {
                        "description": "The underlying error, which may be masked when debugging is disabled.",
                        "type": "string"
                    },
                    "type": {
                        "description": "A summary of the error code based off the HTTP status code or application error code.",
                        "type": "string",
                        "example": "Not Found"
                    },
                    "code": {
                        "description": "The HTTP status code or other internal application error code.",
                        "type": "integer",
                        "example": 404
                    },
                    "request_id": {
                        "description": "The unique request ID for this error.",
                        "type": "string",
                        "example": "cb6f6f9c1783cdc9752cee2a4e95dd4c"
                    },
                    "timestamp": {
                        "description": "The timestamp of the error, in RFC3339 format.",
                        "type": "string",
                        "format": "date-time",
                        "example": "2024-04-26T12:19:01Z"
                    }
                },
                "required": [
                    "error",
                    "type",
                    "code",
                    "timestamp"
                ]
            },
            "ErrorTooManyRequests": {
                "type": "object",
                "properties": {
                    "error": {
                        "description": "The underlying error, which may be masked when debugging is disabled.",
                        "type": "string"
                    },
                    "type": {
                        "description": "A summary of the error code based off the HTTP status code or application error code.",
                        "type": "string",
                        "example": "Too Many Requests"
                    },
                    "code": {
                        "description": "The HTTP status code or other internal application error code.",
                        "type": "integer",
                        "example": 429
                    },
                    "request_id": {
                        "description": "The unique request ID for this error.",
                        "type": "string",
                        "example": "cb6f6f9c1783cdc9752cee2a4e95dd4c"
                    },
                    "timestamp": {
                        "description": "The timestamp of the error, in RFC3339 format.",
                        "type": "string",
                        "format": "date-time",
                        "example": "2024-04-26T12:19:01Z"
                    }
                },
                "required": [
                    "error",
                    "type",
                    "code",
                    "timestamp"
                ]
            },
            "ErrorUnauthorized": {
                "type": "object",
                "properties": {
                    "error": {
                        "description": "The underlying error, which may be masked when debugging is disabled.",
                        "type": "string"
                    },
                    "type": {
                        "description": "A summary of the error code based off the HTTP status code or application error code.",
                        "type": "string",
                        "example": "Unauthorized"
                    },
                    "code": {
                        "description": "The HTTP status code or other internal application error code.",
                        "type": "integer",
                        "example": 401
                    },
                    "request_id": {
                        "description": "The unique request ID for this error.",
                        "type": "string",
                        "example": "cb6f6f9c1783cdc9752cee2a4e95dd4c"
                    },
                    "timestamp": {
                        "description": "The timestamp of the error, in RFC3339 format.",
                        "type": "string",
                        "format": "date-time",
                        "example": "2024-04-26T12:19:01Z"
                    }
                },
                "required": [
                    "error",
                    "type",
                    "code",
                    "timestamp"
                ]
            },
            "FilterOperation": {
                "description": "Specifies how to combine multiple filters.",
                "type": "string",
                "enum": [
                    "and",
                    "or"
                ],
                "default": "and"
            },
            "Follow": {
                "description": "A single Follow entity.",
                "type": "object",
                "properties": {
                    "followed_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "user_id": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "pet_id": {
                        "type": "integer"
                    }
                },
                "required": [
                    "followed_at",
                    "user_id",
                    "pet_id"
                ]
            },
            "FollowCreate": {
                "description": "A single Follow entity and the fields that can be created/updated.",
                "type": "object",
                "properties": {
                    "user_id": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "pet_id": {
                        "type": "integer"
                    }
                },
                "required": [
                    "user_id",
                    "pet_id"
                ]
            },
            "FollowEdges": {
                "type": "object",
                "properties": {
                    "user": {
                        "$ref": "#/components/schemas/User"
                    },
                    "pet": {
                        "$ref": "#/components/schemas/Pet"
                    }
                },
                "required": [
                    "user",
                    "pet"
                ]
            },
            "FollowList": {
                "description": "A paginated result set of Follow entities. Includes eager-loaded edges (if any) for each entity.",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/PagedResponse"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "content": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/FollowRead"
                                }
                            }
                        },
                        "required": [
                            "content"
                        ]
                    }
                ]
            },
            "FollowRead": {
                "description": "A single Follow entity.",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/Follow"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "edges": {
                                "$ref": "#/components/schemas/FollowEdges"
                            }
                        },
                        "required": [
                            "edges"
                        ]
                    }
                ]
            },
            "FollowSortableFields": {
                "description": "All potential sortable fields for Follow entities.",
                "type": "string",
                "enum": [
                    "followed_at",
                    "pet.age",
                    "pet.name",
                    "random",
                    "user.created_at",
                    "user.email",
                    "user.name",
                    "user.updated_at"
                ]
            },
            "Friendship": {
                "description": "A single Friendship entity.",
                "type": "object",
                "properties": {
                    "id": {
                        "description": "The ID of the Friendship entity.",
                        "type": "integer"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "user_id": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "friend_id": {
                        "type": "string",
                        "format": "uuid"
                    }
                },
                "required": [
                    "id",
                    "created_at",
                    "user_id",
                    "friend_id"
                ]
            },
            "FriendshipCreate": {
                "description": "A single Friendship entity and the fields that can be created/updated.",
                "type": "object",
                "properties": {
                    "created_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "user_id": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "friend_id": {
                        "type": "string",
                        "format": "uuid"
                    }
                },
                "required": [
                    "user_id",
                    "friend_id"
                ]
            },
            "FriendshipList": {
                "description": "A paginated result set of Friendship entities. Includes eager-loaded edges (if any) for each entity.",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/PagedResponse"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "content": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/FriendshipRead"
                                }
                            }
                        },
                        "required": [
                            "content"
                        ]
                    }
                ]
            },
            "FriendshipRead": {
                "$ref": "#/components/schemas/Friendship"
            },
            "FriendshipSortableFields": {
                "description": "All potential sortable fields for Friendship entities.",
                "type": "string",
                "enum": [
                    "friend.created_at",
                    "friend.email",
                    "friend.name",
                    "friend.updated_at",
                    "friend_id",
                    "id",
                    "random",
                    "user.created_at",
                    "user.email",
                    "user.name",
                    "user.updated_at",
                    "user_id"
                ],
                "default": "id"
            },
            "FriendshipUpdate": {
                "description": "A single Friendship entity and the fields that can be created/updated.",
                "type": "object",
                "properties": {
                    "created_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "user_id": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "friend_id": {
                        "type": "string",
                        "format": "uuid"
                    }
                }
            },
            "PagedResponse": {
                "type": "object",
                "properties": {
                    "page": {
                        "description": "Page which the results are associated with.",
                        "type": "integer",
                        "minimum": 1,
                        "example": 1
                    },
                    "last_page": {
                        "description": "The number of the last page of results.",
                        "type": "integer",
                        "minimum": 1,
                        "example": 3
                    },
                    "is_last_page": {
                        "description": "If true, the current results are the last page of results.",
                        "type": "boolean",
                        "example": false
                    },
                    "total_count": {
                        "description": "The total number of results based on the provided query.",
                        "type": "integer",
                        "minimum": 0,
                        "example": 123
                    }
                },
                "required": [
                    "page",
                    "last_page",
                    "is_last_page",
                    "total_count"
                ]
            },
            "Pet": {
                "description": "A single Pet entity.",
                "type": "object",
                "properties": {
                    "id": {
                        "description": "The ID of the Pet entity.",
                        "type": "integer"
                    },
                    "name": {
                        "type": "string",
                        "example": "Kuro"
                    },
                    "nicknames": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "age": {
                        "type": "integer",
                        "example": 2
                    },
                    "type": {
                        "$ref": "#/components/schemas/PetTypeEnum"
                    }
                },
                "required": [
                    "id",
                    "name",
                    "age",
                    "type"
                ]
            },
            "PetCategoryList": {
                "description": "List of categories associated with pets (category entity type).",
                "type": "array",
                "items": {
                    "$ref": "#/components/schemas/CategoryRead"
                }
            },
            "PetCreate": {
                "description": "A single Pet entity and the fields that can be created/updated.",
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "example": "Kuro"
                    },
                    "nicknames": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "age": {
                        "type": "integer",
                        "example": 2
                    },
                    "type": {
                        "$ref": "#/components/schemas/PetTypeEnum"
                    },
                    "categories": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        }
                    },
                    "owner": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "friends": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        }
                    },
                    "followed_by": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "format": "uuid"
                        }
                    }
                },
                "required": [
                    "name",
                    "age",
                    "type"
                ]
            },
            "PetEdges": {
                "type": "object",
                "properties": {
                    "categories": {
                        "description": "A list of Category entities. Limited to 1000 items. If there are more results than the limit, the results are capped and you must use the associated edge endpoint with pagination -- see also the 'EagerLoadLimit' config option.",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Category"
                        },
                        "maxItems": 1000,
                        "minItems": 0
                    },
                    "owner": {
                        "$ref": "#/components/schemas/User"
                    }
                }
            },
            "PetList": {
                "description": "A paginated result set of Pet entities. Includes eager-loaded edges (if any) for each entity.",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/PagedResponse"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "content": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/PetRead"
                                }
                            }
                        },
                        "required": [
                            "content"
                        ]
                    }
                ]
            },
            "PetRead": {
                "description": "A single Pet entity.",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/Pet"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "edges": {
                                "$ref": "#/components/schemas/PetEdges"
                            }
                        },
                        "required": [
                            "edges"
                        ]
                    }
                ]
            },
            "PetSortableFields": {
                "description": "All potential sortable fields for Pet entities.",
                "type": "string",
                "enum": [
                    "age",
                    "categories.count",
                    "followed_by.count",
                    "following.count",
                    "friends.age.sum",
                    "friends.count",
                    "id",
                    "name",
                    "owner.created_at",
                    "owner.email",
                    "owner.id",
                    "owner.name",
                    "owner.updated_at",
                    "random"
                ],
                "default": "id"
            },
            "PetTypeEnum": {
                "type": "string",
                "enum": [
                    "DOG",
                    "CAT",
                    "BIRD",
                    "FISH",
                    "AMPHIBIAN",
                    "REPTILE",
                    "OTHER"
                ],
                "example": "DOG"
            },
            "PetUpdate": {
                "description": "A single Pet entity and the fields that can be created/updated.",
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "example": "Kuro"
                    },
                    "nicknames": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "age": {
                        "type": "integer",
                        "example": 2
                    },
                    "type": {
                        "$ref": "#/components/schemas/PetTypeEnum"
                    },
                    "add_categories": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        }
                    },
                    "remove_categories": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        }
                    },
                    "categories": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        }
                    },
                    "owner": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "add_friends": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        }
                    },
                    "remove_friends": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        }
                    },
                    "add_followed_by": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "format": "uuid"
                        }
                    },
                    "remove_followed_by": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "format": "uuid"
                        }
                    }
                }
            },
            "Setting": {
                "description": "Settings contains the global settings for the platform. Generally only one should ever be returned.",
                "type": "object",
                "properties": {
                    "id": {
                        "description": "The ID of the Setting entity.",
                        "type": "integer"
                    },
                    "created_at": {
                        "description": "Time in which the resource was initially created.",
                        "type": "string",
                        "format": "date-time"
                    },
                    "updated_at": {
                        "description": "Time that the resource was last updated.",
                        "type": "string",
                        "format": "date-time"
                    },
                    "global_banner": {
                        "description": "Global banner text to apply to the frontend.",
                        "type": "string",
                        "nullable": true
                    }
                },
                "required": [
                    "id",
                    "created_at",
                    "updated_at"
                ]
            },
            "SettingAdminList": {
                "description": "List of admins associated with settings (user entity type).",
                "type": "array",
                "items": {
                    "$ref": "#/components/schemas/UserRead"
                }
            },
            "SettingEdges": {
                "type": "object",
                "properties": {
                    "admins": {
                        "description": "A list of User entities. Limited to 1000 items. If there are more results than the limit, the results are capped and you must use the associated edge endpoint with pagination -- see also the 'EagerLoadLimit' config option.",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/User"
                        },
                        "maxItems": 1000,
                        "minItems": 0
                    }
                }
            },
            "SettingList": {
                "description": "A paginated result set of Setting entities. Includes eager-loaded edges (if any) for each entity.",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/PagedResponse"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "content": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/SettingRead"
                                }
                            }
                        },
                        "required": [
                            "content"
                        ]
                    }
                ]
            },
            "SettingRead": {
                "description": "Settings contains the global settings for the platform. Generally only one should ever be returned.",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/Setting"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "edges": {
                                "$ref": "#/components/schemas/SettingEdges"
                            }
                        },
                        "required": [
                            "edges"
                        ]
                    }
                ]
            },
            "SettingSortableFields": {
                "description": "All potential sortable fields for Setting entities.",
                "type": "string",
                "enum": [
                    "admins.count",
                    "created_at",
                    "id",
                    "random",
                    "updated_at"
                ],
                "default": "id"
            },
            "SettingUpdate": {
                "description": "Settings contains the global settings for the platform. Generally only one should ever be returned.",
                "type": "object",
                "properties": {
                    "global_banner": {
                        "description": "Global banner text to apply to the frontend.",
                        "type": "string",
                        "nullable": true
                    },
                    "add_admins": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "format": "uuid"
                        }
                    },
                    "remove_admins": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "format": "uuid"
                        }
                    }
                }
            },
            "User": {
                "description": "A single User entity.",
                "type": "object",
                "properties": {
                    "id": {
                        "description": "The ID of the User entity.",
                        "type": "string",
                        "format": "uuid"
                    },
                    "created_at": {
                        "description": "Time in which the resource was initially created.",
                        "type": "string",
                        "format": "date-time"
                    },
                    "updated_at": {
                        "description": "Time that the resource was last updated.",
                        "type": "string",
                        "format": "date-time"
                    },
                    "name": {
                        "description": "Name of the user.",
                        "type": "string"
                    },
                    "type": {
                        "$ref": "#/components/schemas/UserTypeEnum"
                    },
                    "description": {
                        "description": "Full name if USER, otherwise null.",
                        "type": "string",
                        "nullable": true,
                        "example": "Jon Smith"
                    },
                    "enabled": {
                        "description": "If the user is still in the source system.",
                        "type": "boolean",
                        "default": true
                    },
                    "email": {
                        "description": "Email associated with the user. Note that not all users have an associated email address.",
                        "type": "string",
                        "nullable": true,
                        "example": "John.Smith@example.com"
                    },
                    "avatar": {
                        "description": "Avatar data for the user. This should generally only apply to the USER user type.",
                        "type": "string",
                        "format": "byte",
                        "nullable": true
                    },
                    "github_data": {
                        "description": "The github user raw JSON data.",
                        "type": "object",
                        "additionalProperties": true
                    },
                    "profile_url": {
                        "type": "string",
                        "default": "http://127.0.0.1/"
                    }
                },
                "required": [
                    "id",
                    "created_at",
                    "updated_at",
                    "name",
                    "type",
                    "enabled"
                ]
            },
            "UserCreate": {
                "description": "A single User entity and the fields that can be created/updated.",
                "type": "object",
                "properties": {
                    "id": {
                        "description": "The ID of the User entity. If not provided, one will be generated.",
                        "type": "string",
                        "format": "uuid"
                    },
                    "name": {
                        "description": "Name of the user.",
                        "type": "string"
                    },
                    "type": {
                        "$ref": "#/components/schemas/UserTypeEnum"
                    },
                    "description": {
                        "description": "Full name if USER, otherwise null.",
                        "type": "string",
                        "nullable": true,
                        "example": "Jon Smith"
                    },
                    "enabled": {
                        "description": "If the user is still in the source system.",
                        "type": "boolean",
                        "default": true
                    },
                    "email": {
                        "description": "Email associated with the user. Note that not all users have an associated email address.",
                        "type": "string",
                        "nullable": true,
                        "example": "John.Smith@example.com"
                    },
                    "avatar": {
                        "description": "Avatar data for the user. This should generally only apply to the USER user type.",
                        "type": "string",
                        "format": "byte",
                        "nullable": true
                    },
                    "password_hashed": {
                        "description": "Hashed password for the user, this shouldn't be readable in the spec anywhere.",
                        "type": "string"
                    },
                    "github_data": {
                        "description": "The github user raw JSON data.",
                        "type": "object",
                        "additionalProperties": true
                    },
                    "profile_url": {
                        "type": "string",
                        "default": "http://127.0.0.1/"
                    },
                    "pets": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        }
                    },
                    "followed_pets": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        }
                    },
                    "friends": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "format": "uuid"
                        }
                    },
                    "friendships": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        }
                    }
                },
                "required": [
                    "name",
                    "password_hashed"
                ]
            },
            "UserEdges": {
                "type": "object",
                "properties": {
                    "pets": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Pet"
                        }
                    }
                }
            },
            "UserList": {
                "description": "A paginated result set of User entities. Includes eager-loaded edges (if any) for each entity.",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/PagedResponse"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "content": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/UserRead"
                                }
                            }
                        },
                        "required": [
                            "content"
                        ]
                    }
                ]
            },
            "UserPetList": {
                "description": "List of pets associated with users (pet entity type).",
                "type": "array",
                "items": {
                    "$ref": "#/components/schemas/PetRead"
                }
            },
            "UserRead": {
                "description": "A single User entity.",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/User"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "edges": {
                                "$ref": "#/components/schemas/UserEdges"
                            }
                        },
                        "required": [
                            "edges"
                        ]
                    }
                ]
            },
            "UserSortableFields": {
                "description": "All potential sortable fields for User entities.",
                "type": "string",
                "enum": [
                    "created_at",
                    "email",
                    "followed_pets.age.sum",
                    "followed_pets.count",
                    "following.count",
                    "friends.count",
                    "friendships.count",
                    "id",
                    "name",
                    "pets.age.sum",
                    "pets.count",
                    "random",
                    "updated_at"
                ],
                "default": "id"
            },
            "UserTypeEnum": {
                "description": "Type of object being defined (user or system which is for internal usecases).",
                "type": "string",
                "enum": [
                    "SYSTEM",
                    "USER"
                ],
                "example": "USER"
            },
            "UserUpdate": {
                "description": "A single User entity and the fields that can be created/updated.",
                "type": "object",
                "properties": {
                    "name": {
                        "description": "Name of the user.",
                        "type": "string"
                    },
                    "type": {
                        "$ref": "#/components/schemas/UserTypeEnum"
                    },
                    "description": {
                        "description": "Full name if USER, otherwise null.",
                        "type": "string",
                        "nullable": true,
                        "example": "Jon Smith"
                    },
                    "enabled": {
                        "description": "If the user is still in the source system.",
                        "type": "boolean",
                        "default": true
                    },
                    "email": {
                        "description": "Email associated with the user. Note that not all users have an associated email address.",
                        "type": "string",
                        "nullable": true,
                        "example": "John.Smith@example.com"
                    },
                    "avatar": {
                        "description": "Avatar data for the user. This should generally only apply to the USER user type.",
                        "type": "string",
                        "format": "byte",
                        "nullable": true
                    },
                    "password_hashed": {
                        "description": "Hashed password for the user, this shouldn't be readable in the spec anywhere.",
                        "type": "string"
                    },
                    "github_data": {
                        "description": "The github user raw JSON data.",
                        "type": "object",
                        "additionalProperties": true
                    },
                    "profile_url": {
                        "type": "string",
                        "default": "http://127.0.0.1/"
                    },
                    "add_pets": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        }
                    },
                    "remove_pets": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        }
                    },
                    "add_followed_pets": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        }
                    },
                    "remove_followed_pets": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        }
                    },
                    "add_friends": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "format": "uuid"
                        }
                    },
                    "remove_friends": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "format": "uuid"
                        }
                    },
                    "add_friendships": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        }
                    },
                    "remove_friendships": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        }
                    }
                }
            }
        },
        "responses": {
            "ErrorBadRequest": {
                "description": "Bad Request (http status code 400)",
                "headers": {
                    "X-Ratelimit-Limit": {
                        "$ref": "#/components/headers/X-Ratelimit-Limit"
                    },
                    "X-Ratelimit-Remaining": {
                        "$ref": "#/components/headers/X-Ratelimit-Remaining"
                    },
                    "X-Ratelimit-Reset": {
                        "$ref": "#/components/headers/X-Ratelimit-Reset"
                    }
                },
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/ErrorBadRequest"
                        }
                    }
                }
            },
            "ErrorConflict": {
                "description": "Conflict (http status code 409)",
                "headers": {
                    "X-Ratelimit-Limit": {
                        "$ref": "#/components/headers/X-Ratelimit-Limit"
                    },
                    "X-Ratelimit-Remaining": {
                        "$ref": "#/components/headers/X-Ratelimit-Remaining"
                    },
                    "X-Ratelimit-Reset": {
                        "$ref": "#/components/headers/X-Ratelimit-Reset"
                    }
                },
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/ErrorConflict"
                        }
                    }
                }
            },
            "ErrorForbidden": {
                "description": "Forbidden (http status code 403)",
                "headers": {
                    "X-Ratelimit-Limit": {
                        "$ref": "#/components/headers/X-Ratelimit-Limit"
                    },
                    "X-Ratelimit-Remaining": {
                        "$ref": "#/components/headers/X-Ratelimit-Remaining"
                    },
                    "X-Ratelimit-Reset": {
                        "$ref": "#/components/headers/X-Ratelimit-Reset"
                    }
                },
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/ErrorForbidden"
                        }
                    }
                }
            },
            "ErrorInternalServerError": {
                "description": "Internal Server Error (http status code 500)",
                "headers": {
                    "X-Ratelimit-Limit": {
                        "$ref": "#/components/headers/X-Ratelimit-Limit"
                    },
                    "X-Ratelimit-Remaining": {
                        "$ref": "#/components/headers/X-Ratelimit-Remaining"
                    },
                    "X-Ratelimit-Reset": {
                        "$ref": "#/components/headers/X-Ratelimit-Reset"
                    }
                },
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/ErrorInternalServerError"
                        }
                    }
                }
            },
            "ErrorNotFound": {
                "description": "Not Found (http status code 404)",
                "headers": {
                    "X-Ratelimit-Limit": {
                        "$ref": "#/components/headers/X-Ratelimit-Limit"
                    },
                    "X-Ratelimit-Remaining": {
                        "$ref": "#/components/headers/X-Ratelimit-Remaining"
                    },
                    "X-Ratelimit-Reset": {
                        "$ref": "#/components/headers/X-Ratelimit-Reset"
                    }
                },
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/ErrorNotFound"
                        }
                    }
                }
            },
            "ErrorTooManyRequests": {
                "description": "Too Many Requests (http status code 429)",
                "headers": {
                    "X-Ratelimit-Limit": {
                        "$ref": "#/components/headers/X-Ratelimit-Limit"
                    },
                    "X-Ratelimit-Remaining": {
                        "$ref": "#/components/headers/X-Ratelimit-Remaining"
                    },
                    "X-Ratelimit-Reset": {
                        "$ref": "#/components/headers/X-Ratelimit-Reset"
                    }
                },
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/ErrorTooManyRequests"
                        }
                    }
                }
            },
            "ErrorUnauthorized": {
                "description": "Unauthorized (http status code 401)",
                "headers": {
                    "X-Ratelimit-Limit": {
                        "$ref": "#/components/headers/X-Ratelimit-Limit"
                    },
                    "X-Ratelimit-Remaining": {
                        "$ref": "#/components/headers/X-Ratelimit-Remaining"
                    },
                    "X-Ratelimit-Reset": {
                        "$ref": "#/components/headers/X-Ratelimit-Reset"
                    }
                },
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/ErrorUnauthorized"
                        }
                    }
                }
            }
        },
        "parameters": {
            "CategoryCreatedAtGT": {
                "name": "createdAt.gt",
                "in": "query",
                "description": "Filters field \"created_at\" to be greater than the provided value.",
                "schema": {
                    "type": "number",
                    "format": "date-time"
                }
            },
            "CategoryCreatedAtLT": {
                "name": "createdAt.lt",
                "in": "query",
                "description": "Filters field \"created_at\" to be less than the provided value.",
                "schema": {
                    "type": "number",
                    "format": "date-time"
                }
            },
            "CategoryID": {
                "name": "categoryID",
                "in": "path",
                "description": "The ID of the Category to act upon.",
                "required": true,
                "schema": {
                    "type": "integer"
                }
            },
            "CategoryIDEQ": {
                "name": "id.eq",
                "in": "query",
                "description": "Filters field \"id\" to be equal to the provided value.",
                "schema": {
                    "type": "integer"
                }
            },
            "CategoryIDIn": {
                "name": "id.in",
                "in": "query",
                "description": "Filters field \"id\" to be within the provided values.",
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                }
            },
            "CategoryIDNEQ": {
                "name": "id.neq",
                "in": "query",
                "description": "Filters field \"id\" to be not equal to the provided value.",
                "schema": {
                    "type": "integer"
                }
            },
            "CategoryIDNotIn": {
                "name": "id.notIn",
                "in": "query",
                "description": "Filters field \"id\" to be not within the provided values.",
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                }
            },
            "CategoryUpdatedAtGT": {
                "name": "updatedAt.gt",
                "in": "query",
                "description": "Filters field \"updated_at\" to be greater than the provided value.",
                "schema": {
                    "type": "number",
                    "format": "date-time"
                }
            },
            "CategoryUpdatedAtLT": {
                "name": "updatedAt.lt",
                "in": "query",
                "description": "Filters field \"updated_at\" to be less than the provided value.",
                "schema": {
                    "type": "number",
                    "format": "date-time"
                }
            },
            "EdgeCategoryCreatedAtGT": {
                "name": "category.createdAt.gt",
                "in": "query",
                "description": "Filters field \"created_at\" to be greater than the provided value.",
                "schema": {
                    "type": "number",
                    "format": "date-time"
                }
            },
            "EdgeCategoryCreatedAtLT": {
                "name": "category.createdAt.lt",
                "in": "query",
                "description": "Filters field \"created_at\" to be less than the provided value.",
                "schema": {
                    "type": "number",
                    "format": "date-time"
                }
            },
            "EdgeCategoryIDEQ": {
                "name": "category.id.eq",
                "in": "query",
                "description": "Filters field \"id\" to be equal to the provided value.",
                "schema": {
                    "type": "integer"
                }
            },
            "EdgeCategoryIDIn": {
                "name": "category.id.in",
                "in": "query",
                "description": "Filters field \"id\" to be within the provided values.",
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                }
            },
            "EdgeCategoryIDNEQ": {
                "name": "category.id.neq",
                "in": "query",
                "description": "Filters field \"id\" to be not equal to the provided value.",
                "schema": {
                    "type": "integer"
                }
            },
            "EdgeCategoryIDNotIn": {
                "name": "category.id.notIn",
                "in": "query",
                "description": "Filters field \"id\" to be not within the provided values.",
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                }
            },
            "EdgeCategoryUpdatedAtGT": {
                "name": "category.updatedAt.gt",
                "in": "query",
                "description": "Filters field \"updated_at\" to be greater than the provided value.",
                "schema": {
                    "type": "number",
                    "format": "date-time"
                }
            },
            "EdgeCategoryUpdatedAtLT": {
                "name": "category.updatedAt.lt",
                "in": "query",
                "description": "Filters field \"updated_at\" to be less than the provided value.",
                "schema": {
                    "type": "number",
                    "format": "date-time"
                }
            },
            "EdgeFollowedByCreatedAtGT": {
                "name": "followedBy.createdAt.gt",
                "in": "query",
                "description": "Filters field \"created_at\" to be greater than the provided value.",
                "schema": {
                    "type": "number",
                    "format": "date-time"
                }
            },
            "EdgeFollowedByCreatedAtLT": {
                "name": "followedBy.createdAt.lt",
                "in": "query",
                "description": "Filters field \"created_at\" to be less than the provided value.",
                "schema": {
                    "type": "number",
                    "format": "date-time"
                }
            },
            "EdgeFollowedByDescriptionContains": {
                "name": "followedBy.description.has",
                "in": "query",
                "description": "Filters field \"description\" to contain the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgeFollowedByDescriptionContainsFold": {
                "name": "followedBy.description.ihas",
                "in": "query",
                "description": "Filters field \"description\" to contain the provided value, case-insensitive.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgeFollowedByDescriptionIsNil": {
                "name": "followedBy.description.null",
                "in": "query",
                "description": "Filters field \"description\" to be null/nil.",
                "schema": {
                    "type": "boolean"
                }
            },
            "EdgeFollowedByEmailContains": {
                "name": "followedBy.email.has",
                "in": "query",
                "description": "Filters field \"email\" to contain the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgeFollowedByEmailContainsFold": {
                "name": "followedBy.email.ihas",
                "in": "query",
                "description": "Filters field \"email\" to contain the provided value, case-insensitive.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgeFollowedByEmailEQ": {
                "name": "followedBy.email.eq",
                "in": "query",
                "description": "Filters field \"email\" to be equal to the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgeFollowedByEmailEqualFold": {
                "name": "followedBy.email.ieq",
                "in": "query",
                "description": "Filters field \"email\" to be equal to the provided value, case-insensitive.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgeFollowedByEmailHasPrefix": {
                "name": "followedBy.email.prefix",
                "in": "query",
                "description": "Filters field \"email\" to start with the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgeFollowedByEmailHasSuffix": {
                "name": "followedBy.email.suffix",
                "in": "query",
                "description": "Filters field \"email\" to end with the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgeFollowedByEmailIn": {
                "name": "followedBy.email.in",
                "in": "query",
                "description": "Filters field \"email\" to be within the provided values.",
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "EdgeFollowedByEmailIsNil": {
                "name": "followedBy.email.null",
                "in": "query",
                "description": "Filters field \"email\" to be null/nil.",
                "schema": {
                    "type": "boolean"
                }
            },
            "EdgeFollowedByEmailNEQ": {
                "name": "followedBy.email.neq",
                "in": "query",
                "description": "Filters field \"email\" to be not equal to the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgeFollowedByEmailNotIn": {
                "name": "followedBy.email.notIn",
                "in": "query",
                "description": "Filters field \"email\" to be not within the provided values.",
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "EdgeFollowedByEnabledEQ": {
                "name": "followedBy.enabled.eq",
                "in": "query",
                "description": "Filters field \"enabled\" to be equal to the provided value.",
                "schema": {
                    "type": "boolean"
                }
            },
            "EdgeFollowedByIDEQ": {
                "name": "followedBy.id.eq",
                "in": "query",
                "description": "Filters field \"id\" to be equal to the provided value.",
                "schema": {
                    "type": "string",
                    "format": "uuid"
                }
            },
            "EdgeFollowedByIDIn": {
                "name": "followedBy.id.in",
                "in": "query",
                "description": "Filters field \"id\" to be within the provided values.",
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "format": "uuid"
                    }
                }
            },
            "EdgeFollowedByIDNEQ": {
                "name": "followedBy.id.neq",
                "in": "query",
                "description": "Filters field \"id\" to be not equal to the provided value.",
                "schema": {
                    "type": "string",
                    "format": "uuid"
                }
            },
            "EdgeFollowedByIDNotIn": {
                "name": "followedBy.id.notIn",
                "in": "query",
                "description": "Filters field \"id\" to be not within the provided values.",
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "format": "uuid"
                    }
                }
            },
            "EdgeFollowedByNameContains": {
                "name": "followedBy.name.has",
                "in": "query",
                "description": "Filters field \"name\" to contain the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgeFollowedByNameContainsFold": {
                "name": "followedBy.name.ihas",
                "in": "query",
                "description": "Filters field \"name\" to contain the provided value, case-insensitive.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgeFollowedByNameEQ": {
                "name": "followedBy.name.eq",
                "in": "query",
                "description": "Filters field \"name\" to be equal to the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgeFollowedByNameEqualFold": {
                "name": "followedBy.name.ieq",
                "in": "query",
                "description": "Filters field \"name\" to be equal to the provided value, case-insensitive.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgeFollowedByNameHasPrefix": {
                "name": "followedBy.name.prefix",
                "in": "query",
                "description": "Filters field \"name\" to start with the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgeFollowedByNameHasSuffix": {
                "name": "followedBy.name.suffix",
                "in": "query",
                "description": "Filters field \"name\" to end with the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgeFollowedByNameIn": {
                "name": "followedBy.name.in",
                "in": "query",
                "description": "Filters field \"name\" to be within the provided values.",
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "EdgeFollowedByNameNEQ": {
                "name": "followedBy.name.neq",
                "in": "query",
                "description": "Filters field \"name\" to be not equal to the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgeFollowedByNameNotIn": {
                "name": "followedBy.name.notIn",
                "in": "query",
                "description": "Filters field \"name\" to be not within the provided values.",
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "EdgeFollowedByTypeEQ": {
                "name": "followedBy.type.eq",
                "in": "query",
                "description": "Filters field \"type\" to be equal to the provided value.",
                "schema": {
                    "$ref": "#/components/schemas/UserTypeEnum"
                }
            },
            "EdgeFollowedByTypeIn": {
                "name": "followedBy.type.in",
                "in": "query",
                "description": "Filters field \"type\" to be within the provided values.",
                "schema": {
                    "type": "array",
                    "items": {
                        "$ref": "#/components/schemas/UserTypeEnum"
                    }
                }
            },
            "EdgeFollowedByTypeNEQ": {
                "name": "followedBy.type.neq",
                "in": "query",
                "description": "Filters field \"type\" to be not equal to the provided value.",
                "schema": {
                    "$ref": "#/components/schemas/UserTypeEnum"
                }
            },
            "EdgeFollowedByTypeNotIn": {
                "name": "followedBy.type.notIn",
                "in": "query",
                "description": "Filters field \"type\" to be not within the provided values.",
                "schema": {
                    "type": "array",
                    "items": {
                        "$ref": "#/components/schemas/UserTypeEnum"
                    }
                }
            },
            "EdgeFollowedByUpdatedAtGT": {
                "name": "followedBy.updatedAt.gt",
                "in": "query",
                "description": "Filters field \"updated_at\" to be greater than the provided value.",
                "schema": {
                    "type": "number",
                    "format": "date-time"
                }
            },
            "EdgeFollowedByUpdatedAtLT": {
                "name": "followedBy.updatedAt.lt",
                "in": "query",
                "description": "Filters field \"updated_at\" to be less than the provided value.",
                "schema": {
                    "type": "number",
                    "format": "date-time"
                }
            },
            "EdgeFollowedPetAgeEQ": {
                "name": "followedPet.age.eq",
                "in": "query",
                "description": "Filters field \"age\" to be equal to the provided value.",
                "schema": {
                    "type": "integer"
                }
            },
            "EdgeFollowedPetAgeGT": {
                "name": "followedPet.age.gt",
                "in": "query",
                "description": "Filters field \"age\" to be greater than the provided value.",
                "schema": {
                    "type": "number"
                }
            },
            "EdgeFollowedPetAgeIn": {
                "name": "followedPet.age.in",
                "in": "query",
                "description": "Filters field \"age\" to be within the provided values.",
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                }
            },
            "EdgeFollowedPetAgeLT": {
                "name": "followedPet.age.lt",
                "in": "query",
                "description": "Filters field \"age\" to be less than the provided value.",
                "schema": {
                    "type": "number"
                }
            },
            "EdgeFollowedPetAgeNEQ": {
                "name": "followedPet.age.neq",
                "in": "query",
                "description": "Filters field \"age\" to be not equal to the provided value.",
                "schema": {
                    "type": "integer"
                }
            },
            "EdgeFollowedPetAgeNotIn": {
                "name": "followedPet.age.notIn",
                "in": "query",
                "description": "Filters field \"age\" to be not within the provided values.",
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                }
            },
            "EdgeFollowedPetIDEQ": {
                "name": "followedPet.id.eq",
                "in": "query",
                "description": "Filters field \"id\" to be equal to the provided value.",
                "schema": {
                    "type": "integer"
                }
            },
            "EdgeFollowedPetIDIn": {
                "name": "followedPet.id.in",
                "in": "query",
                "description": "Filters field \"id\" to be within the provided values.",
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                }
            },
            "EdgeFollowedPetIDNEQ": {
                "name": "followedPet.id.neq",
                "in": "query",
                "description": "Filters field \"id\" to be not equal to the provided value.",
                "schema": {
                    "type": "integer"
                }
            },
            "EdgeFollowedPetIDNotIn": {
                "name": "followedPet.id.notIn",
                "in": "query",
                "description": "Filters field \"id\" to be not within the provided values.",
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                }
            },
            "EdgeFollowedPetNameContains": {
                "name": "followedPet.name.has",
                "in": "query",
                "description": "Filters field \"name\" to contain the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgeFollowedPetNameContainsFold": {
                "name": "followedPet.name.ihas",
                "in": "query",
                "description": "Filters field \"name\" to contain the provided value, case-insensitive.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgeFollowedPetNameEQ": {
                "name": "followedPet.name.eq",
                "in": "query",
                "description": "Filters field \"name\" to be equal to the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgeFollowedPetNameEqualFold": {
                "name": "followedPet.name.ieq",
                "in": "query",
                "description": "Filters field \"name\" to be equal to the provided value, case-insensitive.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgeFollowedPetNameHasPrefix": {
                "name": "followedPet.name.prefix",
                "in": "query",
                "description": "Filters field \"name\" to start with the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgeFollowedPetNameHasSuffix": {
                "name": "followedPet.name.suffix",
                "in": "query",
                "description": "Filters field \"name\" to end with the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgeFollowedPetNameIn": {
                "name": "followedPet.name.in",
                "in": "query",
                "description": "Filters field \"name\" to be within the provided values.",
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "EdgeFollowedPetNameNEQ": {
                "name": "followedPet.name.neq",
                "in": "query",
                "description": "Filters field \"name\" to be not equal to the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgeFollowedPetNameNotIn": {
                "name": "followedPet.name.notIn",
                "in": "query",
                "description": "Filters field \"name\" to be not within the provided values.",
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "EdgeFollowedPetNicknamesIsNil": {
                "name": "followedPet.nicknames.null",
                "in": "query",
                "description": "Filters field \"nicknames\" to be null/nil.",
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "boolean"
                    }
                }
            },
            "EdgeFollowedPetTypeEQ": {
                "name": "followedPet.type.eq",
                "in": "query",
                "description": "Filters field \"type\" to be equal to the provided value.",
                "schema": {
                    "$ref": "#/components/schemas/PetTypeEnum"
                }
            },
            "EdgeFollowedPetTypeIn": {
                "name": "followedPet.type.in",
                "in": "query",
                "description": "Filters field \"type\" to be within the provided values.",
                "schema": {
                    "type": "array",
                    "items": {
                        "$ref": "#/components/schemas/PetTypeEnum"
                    }
                }
            },
            "EdgeFollowedPetTypeNEQ": {
                "name": "followedPet.type.neq",
                "in": "query",
                "description": "Filters field \"type\" to be not equal to the provided value.",
                "schema": {
                    "$ref": "#/components/schemas/PetTypeEnum"
                }
            },
            "EdgeFollowedPetTypeNotIn": {
                "name": "followedPet.type.notIn",
                "in": "query",
                "description": "Filters field \"type\" to be not within the provided values.",
                "schema": {
                    "type": "array",
                    "items": {
                        "$ref": "#/components/schemas/PetTypeEnum"
                    }
                }
            },
            "EdgeFriendAgeEQ": {
                "name": "friend.age.eq",
                "in": "query",
                "description": "Filters field \"age\" to be equal to the provided value.",
                "schema": {
                    "type": "integer"
                }
            },
            "EdgeFriendAgeGT": {
                "name": "friend.age.gt",
                "in": "query",
                "description": "Filters field \"age\" to be greater than the provided value.",
                "schema": {
                    "type": "number"
                }
            },
            "EdgeFriendAgeIn": {
                "name": "friend.age.in",
                "in": "query",
                "description": "Filters field \"age\" to be within the provided values.",
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                }
            },
            "EdgeFriendAgeLT": {
                "name": "friend.age.lt",
                "in": "query",
                "description": "Filters field \"age\" to be less than the provided value.",
                "schema": {
                    "type": "number"
                }
            },
            "EdgeFriendAgeNEQ": {
                "name": "friend.age.neq",
                "in": "query",
                "description": "Filters field \"age\" to be not equal to the provided value.",
                "schema": {
                    "type": "integer"
                }
            },
            "EdgeFriendAgeNotIn": {
                "name": "friend.age.notIn",
                "in": "query",
                "description": "Filters field \"age\" to be not within the provided values.",
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                }
            },
            "EdgeFriendCreatedAtGT": {
                "name": "friend.createdAt.gt",
                "in": "query",
                "description": "Filters field \"created_at\" to be greater than the provided value.",
                "schema": {
                    "type": "number",
                    "format": "date-time"
                }
            },
            "EdgeFriendCreatedAtLT": {
                "name": "friend.createdAt.lt",
                "in": "query",
                "description": "Filters field \"created_at\" to be less than the provided value.",
                "schema": {
                    "type": "number",
                    "format": "date-time"
                }
            },
            "EdgeFriendDescriptionContains": {
                "name": "friend.description.has",
                "in": "query",
                "description": "Filters field \"description\" to contain the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgeFriendDescriptionContainsFold": {
                "name": "friend.description.ihas",
                "in": "query",
                "description": "Filters field \"description\" to contain the provided value, case-insensitive.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgeFriendDescriptionIsNil": {
                "name": "friend.description.null",
                "in": "query",
                "description": "Filters field \"description\" to be null/nil.",
                "schema": {
                    "type": "boolean"
                }
            },
            "EdgeFriendEmailContains": {
                "name": "friend.email.has",
                "in": "query",
                "description": "Filters field \"email\" to contain the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgeFriendEmailContainsFold": {
                "name": "friend.email.ihas",
                "in": "query",
                "description": "Filters field \"email\" to contain the provided value, case-insensitive.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgeFriendEmailEQ": {
                "name": "friend.email.eq",
                "in": "query",
                "description": "Filters field \"email\" to be equal to the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgeFriendEmailEqualFold": {
                "name": "friend.email.ieq",
                "in": "query",
                "description": "Filters field \"email\" to be equal to the provided value, case-insensitive.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgeFriendEmailHasPrefix": {
                "name": "friend.email.prefix",
                "in": "query",
                "description": "Filters field \"email\" to start with the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgeFriendEmailHasSuffix": {
                "name": "friend.email.suffix",
                "in": "query",
                "description": "Filters field \"email\" to end with the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgeFriendEmailIn": {
                "name": "friend.email.in",
                "in": "query",
                "description": "Filters field \"email\" to be within the provided values.",
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "EdgeFriendEmailIsNil": {
                "name": "friend.email.null",
                "in": "query",
                "description": "Filters field \"email\" to be null/nil.",
                "schema": {
                    "type": "boolean"
                }
            },
            "EdgeFriendEmailNEQ": {
                "name": "friend.email.neq",
                "in": "query",
                "description": "Filters field \"email\" to be not equal to the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgeFriendEmailNotIn": {
                "name": "friend.email.notIn",
                "in": "query",
                "description": "Filters field \"email\" to be not within the provided values.",
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "EdgeFriendEnabledEQ": {
                "name": "friend.enabled.eq",
                "in": "query",
                "description": "Filters field \"enabled\" to be equal to the provided value.",
                "schema": {
                    "type": "boolean"
                }
            },
            "EdgeFriendIDEQ": {
                "name": "friend.id.eq",
                "in": "query",
                "description": "Filters field \"id\" to be equal to the provided value.",
                "schema": {
                    "type": "string",
                    "format": "uuid"
                }
            },
            "EdgeFriendIDIn": {
                "name": "friend.id.in",
                "in": "query",
                "description": "Filters field \"id\" to be within the provided values.",
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "format": "uuid"
                    }
                }
            },
            "EdgeFriendIDNEQ": {
                "name": "friend.id.neq",
                "in": "query",
                "description": "Filters field \"id\" to be not equal to the provided value.",
                "schema": {
                    "type": "string",
                    "format": "uuid"
                }
            },
            "EdgeFriendIDNotIn": {
                "name": "friend.id.notIn",
                "in": "query",
                "description": "Filters field \"id\" to be not within the provided values.",
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "format": "uuid"
                    }
                }
            },
            "EdgeFriendNameContains": {
                "name": "friend.name.has",
                "in": "query",
                "description": "Filters field \"name\" to contain the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgeFriendNameContainsFold": {
                "name": "friend.name.ihas",
                "in": "query",
                "description": "Filters field \"name\" to contain the provided value, case-insensitive.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgeFriendNameEQ": {
                "name": "friend.name.eq",
                "in": "query",
                "description": "Filters field \"name\" to be equal to the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgeFriendNameEqualFold": {
                "name": "friend.name.ieq",
                "in": "query",
                "description": "Filters field \"name\" to be equal to the provided value, case-insensitive.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgeFriendNameHasPrefix": {
                "name": "friend.name.prefix",
                "in": "query",
                "description": "Filters field \"name\" to start with the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgeFriendNameHasSuffix": {
                "name": "friend.name.suffix",
                "in": "query",
                "description": "Filters field \"name\" to end with the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgeFriendNameIn": {
                "name": "friend.name.in",
                "in": "query",
                "description": "Filters field \"name\" to be within the provided values.",
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "EdgeFriendNameNEQ": {
                "name": "friend.name.neq",
                "in": "query",
                "description": "Filters field \"name\" to be not equal to the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgeFriendNameNotIn": {
                "name": "friend.name.notIn",
                "in": "query",
                "description": "Filters field \"name\" to be not within the provided values.",
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "EdgeFriendNicknamesIsNil": {
                "name": "friend.nicknames.null",
                "in": "query",
                "description": "Filters field \"nicknames\" to be null/nil.",
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "boolean"
                    }
                }
            },
            "EdgeFriendTypeEQ": {
                "name": "friend.type.eq",
                "in": "query",
                "description": "Filters field \"type\" to be equal to the provided value.",
                "schema": {
                    "$ref": "#/components/schemas/UserTypeEnum"
                }
            },
            "EdgeFriendTypeIn": {
                "name": "friend.type.in",
                "in": "query",
                "description": "Filters field \"type\" to be within the provided values.",
                "schema": {
                    "type": "array",
                    "items": {
                        "$ref": "#/components/schemas/UserTypeEnum"
                    }
                }
            },
            "EdgeFriendTypeNEQ": {
                "name": "friend.type.neq",
                "in": "query",
                "description": "Filters field \"type\" to be not equal to the provided value.",
                "schema": {
                    "$ref": "#/components/schemas/UserTypeEnum"
                }
            },
            "EdgeFriendTypeNotIn": {
                "name": "friend.type.notIn",
                "in": "query",
                "description": "Filters field \"type\" to be not within the provided values.",
                "schema": {
                    "type": "array",
                    "items": {
                        "$ref": "#/components/schemas/UserTypeEnum"
                    }
                }
            },
            "EdgeFriendUpdatedAtGT": {
                "name": "friend.updatedAt.gt",
                "in": "query",
                "description": "Filters field \"updated_at\" to be greater than the provided value.",
                "schema": {
                    "type": "number",
                    "format": "date-time"
                }
            },
            "EdgeFriendUpdatedAtLT": {
                "name": "friend.updatedAt.lt",
                "in": "query",
                "description": "Filters field \"updated_at\" to be less than the provided value.",
                "schema": {
                    "type": "number",
                    "format": "date-time"
                }
            },
            "EdgeFriendshipFriendIDEQ": {
                "name": "friendship.friendID.eq",
                "in": "query",
                "description": "Filters field \"friend_id\" to be equal to the provided value.",
                "schema": {
                    "type": "string",
                    "format": "uuid"
                }
            },
            "EdgeFriendshipFriendIDIn": {
                "name": "friendship.friendID.in",
                "in": "query",
                "description": "Filters field \"friend_id\" to be within the provided values.",
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "format": "uuid"
                    }
                }
            },
            "EdgeFriendshipFriendIDNEQ": {
                "name": "friendship.friendID.neq",
                "in": "query",
                "description": "Filters field \"friend_id\" to be not equal to the provided value.",
                "schema": {
                    "type": "string",
                    "format": "uuid"
                }
            },
            "EdgeFriendshipFriendIDNotIn": {
                "name": "friendship.friendID.notIn",
                "in": "query",
                "description": "Filters field \"friend_id\" to be not within the provided values.",
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "format": "uuid"
                    }
                }
            },
            "EdgeFriendshipIDEQ": {
                "name": "friendship.id.eq",
                "in": "query",
                "description": "Filters field \"id\" to be equal to the provided value.",
                "schema": {
                    "type": "integer"
                }
            },
            "EdgeFriendshipIDIn": {
                "name": "friendship.id.in",
                "in": "query",
                "description": "Filters field \"id\" to be within the provided values.",
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                }
            },
            "EdgeFriendshipIDNEQ": {
                "name": "friendship.id.neq",
                "in": "query",
                "description": "Filters field \"id\" to be not equal to the provided value.",
                "schema": {
                    "type": "integer"
                }
            },
            "EdgeFriendshipIDNotIn": {
                "name": "friendship.id.notIn",
                "in": "query",
                "description": "Filters field \"id\" to be not within the provided values.",
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                }
            },
            "EdgeFriendshipUserIDEQ": {
                "name": "friendship.userID.eq",
                "in": "query",
                "description": "Filters field \"user_id\" to be equal to the provided value.",
                "schema": {
                    "type": "string",
                    "format": "uuid"
                }
            },
            "EdgeFriendshipUserIDIn": {
                "name": "friendship.userID.in",
                "in": "query",
                "description": "Filters field \"user_id\" to be within the provided values.",
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "format": "uuid"
                    }
                }
            },
            "EdgeFriendshipUserIDNEQ": {
                "name": "friendship.userID.neq",
                "in": "query",
                "description": "Filters field \"user_id\" to be not equal to the provided value.",
                "schema": {
                    "type": "string",
                    "format": "uuid"
                }
            },
            "EdgeFriendshipUserIDNotIn": {
                "name": "friendship.userID.notIn",
                "in": "query",
                "description": "Filters field \"user_id\" to be not within the provided values.",
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "format": "uuid"
                    }
                }
            },
            "EdgeHasCategory": {
                "name": "has.category",
                "in": "query",
                "description": "If true, only return entities that have a category edge.",
                "schema": {
                    "type": "boolean"
                }
            },
            "EdgeHasFollowedBy": {
                "name": "has.followedBy",
                "in": "query",
                "description": "If true, only return entities that have a followed_by edge.",
                "schema": {
                    "type": "boolean"
                }
            },
            "EdgeHasFollowedPet": {
                "name": "has.followedPet",
                "in": "query",
                "description": "If true, only return entities that have a followed_pet edge.",
                "schema": {
                    "type": "boolean"
                }
            },
            "EdgeHasFollowing": {
                "name": "has.following",
                "in": "query",
                "description": "If true, only return entities that have a following edge.",
                "schema": {
                    "type": "boolean"
                }
            },
            "EdgeHasFriend": {
                "name": "has.friend",
                "in": "query",
                "description": "If true, only return entities that have a friend edge.",
                "schema": {
                    "type": "boolean"
                }
            },
            "EdgeHasFriendship": {
                "name": "has.friendship",
                "in": "query",
                "description": "If true, only return entities that have a friendship edge.",
                "schema": {
                    "type": "boolean"
                }
            },
            "EdgeHasOwner": {
                "name": "has.owner",
                "in": "query",
                "description": "If true, only return entities that have a owner edge.",
                "schema": {
                    "type": "boolean"
                }
            },
            "EdgeHasPet": {
                "name": "has.pet",
                "in": "query",
                "description": "If true, only return entities that have a pet edge.",
                "schema": {
                    "type": "boolean"
                }
            },
            "EdgeHasUser": {
                "name": "has.user",
                "in": "query",
                "description": "If true, only return entities that have a user edge.",
                "schema": {
                    "type": "boolean"
                }
            },
            "EdgeOwnerCreatedAtGT": {
                "name": "owner.createdAt.gt",
                "in": "query",
                "description": "Filters field \"created_at\" to be greater than the provided value.",
                "schema": {
                    "type": "number",
                    "format": "date-time"
                }
            },
            "EdgeOwnerCreatedAtLT": {
                "name": "owner.createdAt.lt",
                "in": "query",
                "description": "Filters field \"created_at\" to be less than the provided value.",
                "schema": {
                    "type": "number",
                    "format": "date-time"
                }
            },
            "EdgeOwnerDescriptionContains": {
                "name": "owner.description.has",
                "in": "query",
                "description": "Filters field \"description\" to contain the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgeOwnerDescriptionContainsFold": {
                "name": "owner.description.ihas",
                "in": "query",
                "description": "Filters field \"description\" to contain the provided value, case-insensitive.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgeOwnerDescriptionIsNil": {
                "name": "owner.description.null",
                "in": "query",
                "description": "Filters field \"description\" to be null/nil.",
                "schema": {
                    "type": "boolean"
                }
            },
            "EdgeOwnerEmailContains": {
                "name": "owner.email.has",
                "in": "query",
                "description": "Filters field \"email\" to contain the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgeOwnerEmailContainsFold": {
                "name": "owner.email.ihas",
                "in": "query",
                "description": "Filters field \"email\" to contain the provided value, case-insensitive.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgeOwnerEmailEQ": {
                "name": "owner.email.eq",
                "in": "query",
                "description": "Filters field \"email\" to be equal to the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgeOwnerEmailEqualFold": {
                "name": "owner.email.ieq",
                "in": "query",
                "description": "Filters field \"email\" to be equal to the provided value, case-insensitive.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgeOwnerEmailHasPrefix": {
                "name": "owner.email.prefix",
                "in": "query",
                "description": "Filters field \"email\" to start with the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgeOwnerEmailHasSuffix": {
                "name": "owner.email.suffix",
                "in": "query",
                "description": "Filters field \"email\" to end with the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgeOwnerEmailIn": {
                "name": "owner.email.in",
                "in": "query",
                "description": "Filters field \"email\" to be within the provided values.",
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "EdgeOwnerEmailIsNil": {
                "name": "owner.email.null",
                "in": "query",
                "description": "Filters field \"email\" to be null/nil.",
                "schema": {
                    "type": "boolean"
                }
            },
            "EdgeOwnerEmailNEQ": {
                "name": "owner.email.neq",
                "in": "query",
                "description": "Filters field \"email\" to be not equal to the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgeOwnerEmailNotIn": {
                "name": "owner.email.notIn",
                "in": "query",
                "description": "Filters field \"email\" to be not within the provided values.",
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "EdgeOwnerEnabledEQ": {
                "name": "owner.enabled.eq",
                "in": "query",
                "description": "Filters field \"enabled\" to be equal to the provided value.",
                "schema": {
                    "type": "boolean"
                }
            },
            "EdgeOwnerIDEQ": {
                "name": "owner.id.eq",
                "in": "query",
                "description": "Filters field \"id\" to be equal to the provided value.",
                "schema": {
                    "type": "string",
                    "format": "uuid"
                }
            },
            "EdgeOwnerIDIn": {
                "name": "owner.id.in",
                "in": "query",
                "description": "Filters field \"id\" to be within the provided values.",
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "format": "uuid"
                    }
                }
            },
            "EdgeOwnerIDNEQ": {
                "name": "owner.id.neq",
                "in": "query",
                "description": "Filters field \"id\" to be not equal to the provided value.",
                "schema": {
                    "type": "string",
                    "format": "uuid"
                }
            },
            "EdgeOwnerIDNotIn": {
                "name": "owner.id.notIn",
                "in": "query",
                "description": "Filters field \"id\" to be not within the provided values.",
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "format": "uuid"
                    }
                }
            },
            "EdgeOwnerNameContains": {
                "name": "owner.name.has",
                "in": "query",
                "description": "Filters field \"name\" to contain the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgeOwnerNameContainsFold": {
                "name": "owner.name.ihas",
                "in": "query",
                "description": "Filters field \"name\" to contain the provided value, case-insensitive.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgeOwnerNameEQ": {
                "name": "owner.name.eq",
                "in": "query",
                "description": "Filters field \"name\" to be equal to the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgeOwnerNameEqualFold": {
                "name": "owner.name.ieq",
                "in": "query",
                "description": "Filters field \"name\" to be equal to the provided value, case-insensitive.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgeOwnerNameHasPrefix": {
                "name": "owner.name.prefix",
                "in": "query",
                "description": "Filters field \"name\" to start with the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgeOwnerNameHasSuffix": {
                "name": "owner.name.suffix",
                "in": "query",
                "description": "Filters field \"name\" to end with the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgeOwnerNameIn": {
                "name": "owner.name.in",
                "in": "query",
                "description": "Filters field \"name\" to be within the provided values.",
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "EdgeOwnerNameNEQ": {
                "name": "owner.name.neq",
                "in": "query",
                "description": "Filters field \"name\" to be not equal to the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgeOwnerNameNotIn": {
                "name": "owner.name.notIn",
                "in": "query",
                "description": "Filters field \"name\" to be not within the provided values.",
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "EdgeOwnerTypeEQ": {
                "name": "owner.type.eq",
                "in": "query",
                "description": "Filters field \"type\" to be equal to the provided value.",
                "schema": {
                    "$ref": "#/components/schemas/UserTypeEnum"
                }
            },
            "EdgeOwnerTypeIn": {
                "name": "owner.type.in",
                "in": "query",
                "description": "Filters field \"type\" to be within the provided values.",
                "schema": {
                    "type": "array",
                    "items": {
                        "$ref": "#/components/schemas/UserTypeEnum"
                    }
                }
            },
            "EdgeOwnerTypeNEQ": {
                "name": "owner.type.neq",
                "in": "query",
                "description": "Filters field \"type\" to be not equal to the provided value.",
                "schema": {
                    "$ref": "#/components/schemas/UserTypeEnum"
                }
            },
            "EdgeOwnerTypeNotIn": {
                "name": "owner.type.notIn",
                "in": "query",
                "description": "Filters field \"type\" to be not within the provided values.",
                "schema": {
                    "type": "array",
                    "items": {
                        "$ref": "#/components/schemas/UserTypeEnum"
                    }
                }
            },
            "EdgeOwnerUpdatedAtGT": {
                "name": "owner.updatedAt.gt",
                "in": "query",
                "description": "Filters field \"updated_at\" to be greater than the provided value.",
                "schema": {
                    "type": "number",
                    "format": "date-time"
                }
            },
            "EdgeOwnerUpdatedAtLT": {
                "name": "owner.updatedAt.lt",
                "in": "query",
                "description": "Filters field \"updated_at\" to be less than the provided value.",
                "schema": {
                    "type": "number",
                    "format": "date-time"
                }
            },
            "EdgePetAgeEQ": {
                "name": "pet.age.eq",
                "in": "query",
                "description": "Filters field \"age\" to be equal to the provided value.",
                "schema": {
                    "type": "integer"
                }
            },
            "EdgePetAgeGT": {
                "name": "pet.age.gt",
                "in": "query",
                "description": "Filters field \"age\" to be greater than the provided value.",
                "schema": {
                    "type": "number"
                }
            },
            "EdgePetAgeIn": {
                "name": "pet.age.in",
                "in": "query",
                "description": "Filters field \"age\" to be within the provided values.",
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                }
            },
            "EdgePetAgeLT": {
                "name": "pet.age.lt",
                "in": "query",
                "description": "Filters field \"age\" to be less than the provided value.",
                "schema": {
                    "type": "number"
                }
            },
            "EdgePetAgeNEQ": {
                "name": "pet.age.neq",
                "in": "query",
                "description": "Filters field \"age\" to be not equal to the provided value.",
                "schema": {
                    "type": "integer"
                }
            },
            "EdgePetAgeNotIn": {
                "name": "pet.age.notIn",
                "in": "query",
                "description": "Filters field \"age\" to be not within the provided values.",
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                }
            },
            "EdgePetIDEQ": {
                "name": "pet.id.eq",
                "in": "query",
                "description": "Filters field \"id\" to be equal to the provided value.",
                "schema": {
                    "type": "integer"
                }
            },
            "EdgePetIDIn": {
                "name": "pet.id.in",
                "in": "query",
                "description": "Filters field \"id\" to be within the provided values.",
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                }
            },
            "EdgePetIDNEQ": {
                "name": "pet.id.neq",
                "in": "query",
                "description": "Filters field \"id\" to be not equal to the provided value.",
                "schema": {
                    "type": "integer"
                }
            },
            "EdgePetIDNotIn": {
                "name": "pet.id.notIn",
                "in": "query",
                "description": "Filters field \"id\" to be not within the provided values.",
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                }
            },
            "EdgePetNameContains": {
                "name": "pet.name.has",
                "in": "query",
                "description": "Filters field \"name\" to contain the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgePetNameContainsFold": {
                "name": "pet.name.ihas",
                "in": "query",
                "description": "Filters field \"name\" to contain the provided value, case-insensitive.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgePetNameEQ": {
                "name": "pet.name.eq",
                "in": "query",
                "description": "Filters field \"name\" to be equal to the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgePetNameEqualFold": {
                "name": "pet.name.ieq",
                "in": "query",
                "description": "Filters field \"name\" to be equal to the provided value, case-insensitive.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgePetNameHasPrefix": {
                "name": "pet.name.prefix",
                "in": "query",
                "description": "Filters field \"name\" to start with the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgePetNameHasSuffix": {
                "name": "pet.name.suffix",
                "in": "query",
                "description": "Filters field \"name\" to end with the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgePetNameIn": {
                "name": "pet.name.in",
                "in": "query",
                "description": "Filters field \"name\" to be within the provided values.",
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "EdgePetNameNEQ": {
                "name": "pet.name.neq",
                "in": "query",
                "description": "Filters field \"name\" to be not equal to the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgePetNameNotIn": {
                "name": "pet.name.notIn",
                "in": "query",
                "description": "Filters field \"name\" to be not within the provided values.",
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "EdgePetNicknamesIsNil": {
                "name": "pet.nicknames.null",
                "in": "query",
                "description": "Filters field \"nicknames\" to be null/nil.",
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "boolean"
                    }
                }
            },
            "EdgePetTypeEQ": {
                "name": "pet.type.eq",
                "in": "query",
                "description": "Filters field \"type\" to be equal to the provided value.",
                "schema": {
                    "$ref": "#/components/schemas/PetTypeEnum"
                }
            },
            "EdgePetTypeIn": {
                "name": "pet.type.in",
                "in": "query",
                "description": "Filters field \"type\" to be within the provided values.",
                "schema": {
                    "type": "array",
                    "items": {
                        "$ref": "#/components/schemas/PetTypeEnum"
                    }
                }
            },
            "EdgePetTypeNEQ": {
                "name": "pet.type.neq",
                "in": "query",
                "description": "Filters field \"type\" to be not equal to the provided value.",
                "schema": {
                    "$ref": "#/components/schemas/PetTypeEnum"
                }
            },
            "EdgePetTypeNotIn": {
                "name": "pet.type.notIn",
                "in": "query",
                "description": "Filters field \"type\" to be not within the provided values.",
                "schema": {
                    "type": "array",
                    "items": {
                        "$ref": "#/components/schemas/PetTypeEnum"
                    }
                }
            },
            "EdgeUserCreatedAtGT": {
                "name": "user.createdAt.gt",
                "in": "query",
                "description": "Filters field \"created_at\" to be greater than the provided value.",
                "schema": {
                    "type": "number",
                    "format": "date-time"
                }
            },
            "EdgeUserCreatedAtLT": {
                "name": "user.createdAt.lt",
                "in": "query",
                "description": "Filters field \"created_at\" to be less than the provided value.",
                "schema": {
                    "type": "number",
                    "format": "date-time"
                }
            },
            "EdgeUserDescriptionContains": {
                "name": "user.description.has",
                "in": "query",
                "description": "Filters field \"description\" to contain the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgeUserDescriptionContainsFold": {
                "name": "user.description.ihas",
                "in": "query",
                "description": "Filters field \"description\" to contain the provided value, case-insensitive.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgeUserDescriptionIsNil": {
                "name": "user.description.null",
                "in": "query",
                "description": "Filters field \"description\" to be null/nil.",
                "schema": {
                    "type": "boolean"
                }
            },
            "EdgeUserEmailContains": {
                "name": "user.email.has",
                "in": "query",
                "description": "Filters field \"email\" to contain the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgeUserEmailContainsFold": {
                "name": "user.email.ihas",
                "in": "query",
                "description": "Filters field \"email\" to contain the provided value, case-insensitive.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgeUserEmailEQ": {
                "name": "user.email.eq",
                "in": "query",
                "description": "Filters field \"email\" to be equal to the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgeUserEmailEqualFold": {
                "name": "user.email.ieq",
                "in": "query",
                "description": "Filters field \"email\" to be equal to the provided value, case-insensitive.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgeUserEmailHasPrefix": {
                "name": "user.email.prefix",
                "in": "query",
                "description": "Filters field \"email\" to start with the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgeUserEmailHasSuffix": {
                "name": "user.email.suffix",
                "in": "query",
                "description": "Filters field \"email\" to end with the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgeUserEmailIn": {
                "name": "user.email.in",
                "in": "query",
                "description": "Filters field \"email\" to be within the provided values.",
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "EdgeUserEmailIsNil": {
                "name": "user.email.null",
                "in": "query",
                "description": "Filters field \"email\" to be null/nil.",
                "schema": {
                    "type": "boolean"
                }
            },
            "EdgeUserEmailNEQ": {
                "name": "user.email.neq",
                "in": "query",
                "description": "Filters field \"email\" to be not equal to the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgeUserEmailNotIn": {
                "name": "user.email.notIn",
                "in": "query",
                "description": "Filters field \"email\" to be not within the provided values.",
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "EdgeUserEnabledEQ": {
                "name": "user.enabled.eq",
                "in": "query",
                "description": "Filters field \"enabled\" to be equal to the provided value.",
                "schema": {
                    "type": "boolean"
                }
            },
            "EdgeUserNameContains": {
                "name": "user.name.has",
                "in": "query",
                "description": "Filters field \"name\" to contain the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgeUserNameContainsFold": {
                "name": "user.name.ihas",
                "in": "query",
                "description": "Filters field \"name\" to contain the provided value, case-insensitive.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgeUserNameEQ": {
                "name": "user.name.eq",
                "in": "query",
                "description": "Filters field \"name\" to be equal to the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgeUserNameEqualFold": {
                "name": "user.name.ieq",
                "in": "query",
                "description": "Filters field \"name\" to be equal to the provided value, case-insensitive.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgeUserNameHasPrefix": {
                "name": "user.name.prefix",
                "in": "query",
                "description": "Filters field \"name\" to start with the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgeUserNameHasSuffix": {
                "name": "user.name.suffix",
                "in": "query",
                "description": "Filters field \"name\" to end with the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgeUserNameIn": {
                "name": "user.name.in",
                "in": "query",
                "description": "Filters field \"name\" to be within the provided values.",
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "EdgeUserNameNEQ": {
                "name": "user.name.neq",
                "in": "query",
                "description": "Filters field \"name\" to be not equal to the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgeUserNameNotIn": {
                "name": "user.name.notIn",
                "in": "query",
                "description": "Filters field \"name\" to be not within the provided values.",
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "EdgeUserTypeEQ": {
                "name": "user.type.eq",
                "in": "query",
                "description": "Filters field \"type\" to be equal to the provided value.",
                "schema": {
                    "$ref": "#/components/schemas/UserTypeEnum"
                }
            },
            "EdgeUserTypeIn": {
                "name": "user.type.in",
                "in": "query",
                "description": "Filters field \"type\" to be within the provided values.",
                "schema": {
                    "type": "array",
                    "items": {
                        "$ref": "#/components/schemas/UserTypeEnum"
                    }
                }
            },
            "EdgeUserTypeNEQ": {
                "name": "user.type.neq",
                "in": "query",
                "description": "Filters field \"type\" to be not equal to the provided value.",
                "schema": {
                    "$ref": "#/components/schemas/UserTypeEnum"
                }
            },
            "EdgeUserTypeNotIn": {
                "name": "user.type.notIn",
                "in": "query",
                "description": "Filters field \"type\" to be not within the provided values.",
                "schema": {
                    "type": "array",
                    "items": {
                        "$ref": "#/components/schemas/UserTypeEnum"
                    }
                }
            },
            "EdgeUserUpdatedAtGT": {
                "name": "user.updatedAt.gt",
                "in": "query",
                "description": "Filters field \"updated_at\" to be greater than the provided value.",
                "schema": {
                    "type": "number",
                    "format": "date-time"
                }
            },
            "EdgeUserUpdatedAtLT": {
                "name": "user.updatedAt.lt",
                "in": "query",
                "description": "Filters field \"updated_at\" to be less than the provided value.",
                "schema": {
                    "type": "number",
                    "format": "date-time"
                }
            },
            "FilterOperation": {
                "name": "filter_op",
                "in": "query",
                "description": "Filter operation to use.",
                "schema": {
                    "$ref": "#/components/schemas/FilterOperation"
                }
            },
            "FriendshipFriendIDEQ": {
                "name": "friendID.eq",
                "in": "query",
                "description": "Filters field \"friend_id\" to be equal to the provided value.",
                "schema": {
                    "type": "string",
                    "format": "uuid"
                }
            },
            "FriendshipFriendIDIn": {
                "name": "friendID.in",
                "in": "query",
                "description": "Filters field \"friend_id\" to be within the provided values.",
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "format": "uuid"
                    }
                }
            },
            "FriendshipFriendIDNEQ": {
                "name": "friendID.neq",
                "in": "query",
                "description": "Filters field \"friend_id\" to be not equal to the provided value.",
                "schema": {
                    "type": "string",
                    "format": "uuid"
                }
            },
            "FriendshipFriendIDNotIn": {
                "name": "friendID.notIn",
                "in": "query",
                "description": "Filters field \"friend_id\" to be not within the provided values.",
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "format": "uuid"
                    }
                }
            },
            "FriendshipID": {
                "name": "friendshipID",
                "in": "path",
                "description": "The ID of the Friendship to act upon.",
                "required": true,
                "schema": {
                    "type": "integer"
                }
            },
            "FriendshipIDEQ": {
                "name": "id.eq",
                "in": "query",
                "description": "Filters field \"id\" to be equal to the provided value.",
                "schema": {
                    "type": "integer"
                }
            },
            "FriendshipIDIn": {
                "name": "id.in",
                "in": "query",
                "description": "Filters field \"id\" to be within the provided values.",
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                }
            },
            "FriendshipIDNEQ": {
                "name": "id.neq",
                "in": "query",
                "description": "Filters field \"id\" to be not equal to the provided value.",
                "schema": {
                    "type": "integer"
                }
            },
            "FriendshipIDNotIn": {
                "name": "id.notIn",
                "in": "query",
                "description": "Filters field \"id\" to be not within the provided values.",
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                }
            },
            "FriendshipUserIDEQ": {
                "name": "userID.eq",
                "in": "query",
                "description": "Filters field \"user_id\" to be equal to the provided value.",
                "schema": {
                    "type": "string",
                    "format": "uuid"
                }
            },
            "FriendshipUserIDIn": {
                "name": "userID.in",
                "in": "query",
                "description": "Filters field \"user_id\" to be within the provided values.",
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "format": "uuid"
                    }
                }
            },
            "FriendshipUserIDNEQ": {
                "name": "userID.neq",
                "in": "query",
                "description": "Filters field \"user_id\" to be not equal to the provided value.",
                "schema": {
                    "type": "string",
                    "format": "uuid"
                }
            },
            "FriendshipUserIDNotIn": {
                "name": "userID.notIn",
                "in": "query",
                "description": "Filters field \"user_id\" to be not within the provided values.",
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "format": "uuid"
                    }
                }
            },
            "Page": {
                "name": "page",
                "in": "query",
                "description": "The page number to retrieve.",
                "schema": {
                    "type": "integer",
                    "minimum": 1,
                    "default": 1
                }
            },
            "PetAgeEQ": {
                "name": "age.eq",
                "in": "query",
                "description": "Filters field \"age\" to be equal to the provided value.",
                "schema": {
                    "type": "integer"
                }
            },
            "PetAgeGT": {
                "name": "age.gt",
                "in": "query",
                "description": "Filters field \"age\" to be greater than the provided value.",
                "schema": {
                    "type": "number"
                }
            },
            "PetAgeIn": {
                "name": "age.in",
                "in": "query",
                "description": "Filters field \"age\" to be within the provided values.",
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                }
            },
            "PetAgeLT": {
                "name": "age.lt",
                "in": "query",
                "description": "Filters field \"age\" to be less than the provided value.",
                "schema": {
                    "type": "number"
                }
            },
            "PetAgeNEQ": {
                "name": "age.neq",
                "in": "query",
                "description": "Filters field \"age\" to be not equal to the provided value.",
                "schema": {
                    "type": "integer"
                }
            },
            "PetAgeNotIn": {
                "name": "age.notIn",
                "in": "query",
                "description": "Filters field \"age\" to be not within the provided values.",
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                }
            },
            "PetID": {
                "name": "petID",
                "in": "path",
                "description": "The ID of the Pet to act upon.",
                "required": true,
                "schema": {
                    "type": "integer"
                }
            },
            "PetIDEQ": {
                "name": "id.eq",
                "in": "query",
                "description": "Filters field \"id\" to be equal to the provided value.",
                "schema": {
                    "type": "integer"
                }
            },
            "PetIDIn": {
                "name": "id.in",
                "in": "query",
                "description": "Filters field \"id\" to be within the provided values.",
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                }
            },
            "PetIDNEQ": {
                "name": "id.neq",
                "in": "query",
                "description": "Filters field \"id\" to be not equal to the provided value.",
                "schema": {
                    "type": "integer"
                }
            },
            "PetIDNotIn": {
                "name": "id.notIn",
                "in": "query",
                "description": "Filters field \"id\" to be not within the provided values.",
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                }
            },
            "PetNameContains": {
                "name": "name.has",
                "in": "query",
                "description": "Filters field \"name\" to contain the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "PetNameContainsFold": {
                "name": "name.ihas",
                "in": "query",
                "description": "Filters field \"name\" to contain the provided value, case-insensitive.",
                "schema": {
                    "type": "string"
                }
            },
            "PetNameEQ": {
                "name": "name.eq",
                "in": "query",
                "description": "Filters field \"name\" to be equal to the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "PetNameEqualFold": {
                "name": "name.ieq",
                "in": "query",
                "description": "Filters field \"name\" to be equal to the provided value, case-insensitive.",
                "schema": {
                    "type": "string"
                }
            },
            "PetNameHasPrefix": {
                "name": "name.prefix",
                "in": "query",
                "description": "Filters field \"name\" to start with the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "PetNameHasSuffix": {
                "name": "name.suffix",
                "in": "query",
                "description": "Filters field \"name\" to end with the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "PetNameIn": {
                "name": "name.in",
                "in": "query",
                "description": "Filters field \"name\" to be within the provided values.",
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "PetNameNEQ": {
                "name": "name.neq",
                "in": "query",
                "description": "Filters field \"name\" to be not equal to the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "PetNameNotIn": {
                "name": "name.notIn",
                "in": "query",
                "description": "Filters field \"name\" to be not within the provided values.",
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "PetNicknamesIsNil": {
                "name": "nicknames.null",
                "in": "query",
                "description": "Filters field \"nicknames\" to be null/nil.",
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "boolean"
                    }
                }
            },
            "PetTypeEQ": {
                "name": "type.eq",
                "in": "query",
                "description": "Filters field \"type\" to be equal to the provided value.",
                "schema": {
                    "$ref": "#/components/schemas/PetTypeEnum"
                }
            },
            "PetTypeIn": {
                "name": "type.in",
                "in": "query",
                "description": "Filters field \"type\" to be within the provided values.",
                "schema": {
                    "type": "array",
                    "items": {
                        "$ref": "#/components/schemas/PetTypeEnum"
                    }
                }
            },
            "PetTypeNEQ": {
                "name": "type.neq",
                "in": "query",
                "description": "Filters field \"type\" to be not equal to the provided value.",
                "schema": {
                    "$ref": "#/components/schemas/PetTypeEnum"
                }
            },
            "PetTypeNotIn": {
                "name": "type.notIn",
                "in": "query",
                "description": "Filters field \"type\" to be not within the provided values.",
                "schema": {
                    "type": "array",
                    "items": {
                        "$ref": "#/components/schemas/PetTypeEnum"
                    }
                }
            },
            "PrettyResponse": {
                "name": "pretty",
                "in": "query",
                "description": "If set to true, any JSON response will be indented.",
                "schema": {
                    "type": "boolean"
                }
            },
            "SettingID": {
                "name": "settingID",
                "in": "path",
                "description": "The ID of the Setting to act upon.",
                "required": true,
                "schema": {
                    "type": "integer"
                }
            },
            "SettingsCreatedAtGT": {
                "name": "createdAt.gt",
                "in": "query",
                "description": "Filters field \"created_at\" to be greater than the provided value.",
                "schema": {
                    "type": "number",
                    "format": "date-time"
                }
            },
            "SettingsCreatedAtLT": {
                "name": "createdAt.lt",
                "in": "query",
                "description": "Filters field \"created_at\" to be less than the provided value.",
                "schema": {
                    "type": "number",
                    "format": "date-time"
                }
            },
            "SettingsIDEQ": {
                "name": "id.eq",
                "in": "query",
                "description": "Filters field \"id\" to be equal to the provided value.",
                "schema": {
                    "type": "integer"
                }
            },
            "SettingsIDIn": {
                "name": "id.in",
                "in": "query",
                "description": "Filters field \"id\" to be within the provided values.",
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                }
            },
            "SettingsIDNEQ": {
                "name": "id.neq",
                "in": "query",
                "description": "Filters field \"id\" to be not equal to the provided value.",
                "schema": {
                    "type": "integer"
                }
            },
            "SettingsIDNotIn": {
                "name": "id.notIn",
                "in": "query",
                "description": "Filters field \"id\" to be not within the provided values.",
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                }
            },
            "SettingsUpdatedAtGT": {
                "name": "updatedAt.gt",
                "in": "query",
                "description": "Filters field \"updated_at\" to be greater than the provided value.",
                "schema": {
                    "type": "number",
                    "format": "date-time"
                }
            },
            "SettingsUpdatedAtLT": {
                "name": "updatedAt.lt",
                "in": "query",
                "description": "Filters field \"updated_at\" to be less than the provided value.",
                "schema": {
                    "type": "number",
                    "format": "date-time"
                }
            },
            "UserCreatedAtGT": {
                "name": "createdAt.gt",
                "in": "query",
                "description": "Filters field \"created_at\" to be greater than the provided value.",
                "schema": {
                    "type": "number",
                    "format": "date-time"
                }
            },
            "UserCreatedAtLT": {
                "name": "createdAt.lt",
                "in": "query",
                "description": "Filters field \"created_at\" to be less than the provided value.",
                "schema": {
                    "type": "number",
                    "format": "date-time"
                }
            },
            "UserDescriptionContains": {
                "name": "description.has",
                "in": "query",
                "description": "Filters field \"description\" to contain the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "UserDescriptionContainsFold": {
                "name": "description.ihas",
                "in": "query",
                "description": "Filters field \"description\" to contain the provided value, case-insensitive.",
                "schema": {
                    "type": "string"
                }
            },
            "UserDescriptionIsNil": {
                "name": "description.null",
                "in": "query",
                "description": "Filters field \"description\" to be null/nil.",
                "schema": {
                    "type": "boolean"
                }
            },
            "UserEmailContains": {
                "name": "email.has",
                "in": "query",
                "description": "Filters field \"email\" to contain the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "UserEmailContainsFold": {
                "name": "email.ihas",
                "in": "query",
                "description": "Filters field \"email\" to contain the provided value, case-insensitive.",
                "schema": {
                    "type": "string"
                }
            },
            "UserEmailEQ": {
                "name": "email.eq",
                "in": "query",
                "description": "Filters field \"email\" to be equal to the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "UserEmailEqualFold": {
                "name": "email.ieq",
                "in": "query",
                "description": "Filters field \"email\" to be equal to the provided value, case-insensitive.",
                "schema": {
                    "type": "string"
                }
            },
            "UserEmailHasPrefix": {
                "name": "email.prefix",
                "in": "query",
                "description": "Filters field \"email\" to start with the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "UserEmailHasSuffix": {
                "name": "email.suffix",
                "in": "query",
                "description": "Filters field \"email\" to end with the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "UserEmailIn": {
                "name": "email.in",
                "in": "query",
                "description": "Filters field \"email\" to be within the provided values.",
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "UserEmailIsNil": {
                "name": "email.null",
                "in": "query",
                "description": "Filters field \"email\" to be null/nil.",
                "schema": {
                    "type": "boolean"
                }
            },
            "UserEmailNEQ": {
                "name": "email.neq",
                "in": "query",
                "description": "Filters field \"email\" to be not equal to the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "UserEmailNotIn": {
                "name": "email.notIn",
                "in": "query",
                "description": "Filters field \"email\" to be not within the provided values.",
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "UserEnabledEQ": {
                "name": "enabled.eq",
                "in": "query",
                "description": "Filters field \"enabled\" to be equal to the provided value.",
                "schema": {
                    "type": "boolean"
                }
            },
            "UserFilterGroupSearchContains": {
                "name": "search.has",
                "in": "query",
                "description": "Field \"search.has\" filters across multiple fields (case insensitive): name, description, email.",
                "schema": {
                    "description": "Name of the user.",
                    "type": "string"
                }
            },
            "UserFilterGroupSearchContainsFold": {
                "name": "search.ihas",
                "in": "query",
                "description": "Field \"search.ihas\" filters across multiple fields (case insensitive): name, description, email.",
                "schema": {
                    "description": "Name of the user.",
                    "type": "string"
                }
            },
            "UserFilterGroupSearchEQ": {
                "name": "search.eq",
                "in": "query",
                "description": "Field \"search.eq\" filters across multiple fields (case insensitive): name, description, email.",
                "schema": {
                    "description": "Name of the user.",
                    "type": "string"
                }
            },
            "UserFilterGroupSearchEqualFold": {
                "name": "search.ieq",
                "in": "query",
                "description": "Field \"search.ieq\" filters across multiple fields (case insensitive): name, description, email.",
                "schema": {
                    "description": "Name of the user.",
                    "type": "string"
                }
            },
            "UserFilterGroupSearchHasPrefix": {
                "name": "search.prefix",
                "in": "query",
                "description": "Field \"search.prefix\" filters across multiple fields (case insensitive): name, description, email.",
                "schema": {
                    "description": "Name of the user.",
                    "type": "string"
                }
            },
            "UserFilterGroupSearchHasSuffix": {
                "name": "search.suffix",
                "in": "query",
                "description": "Field \"search.suffix\" filters across multiple fields (case insensitive): name, description, email.",
                "schema": {
                    "description": "Name of the user.",
                    "type": "string"
                }
            },
            "UserFilterGroupSearchIn": {
                "name": "search.in",
                "in": "query",
                "description": "Field \"search.in\" filters across multiple fields (case insensitive): name, description, email.",
                "schema": {
                    "description": "Name of the user.",
                    "type": "string"
                }
            },
            "UserFilterGroupSearchNEQ": {
                "name": "search.neq",
                "in": "query",
                "description": "Field \"search.neq\" filters across multiple fields (case insensitive): name, description, email.",
                "schema": {
                    "description": "Name of the user.",
                    "type": "string"
                }
            },
            "UserFilterGroupSearchNotIn": {
                "name": "search.notIn",
                "in": "query",
                "description": "Field \"search.notIn\" filters across multiple fields (case insensitive): name, description, email.",
                "schema": {
                    "description": "Name of the user.",
                    "type": "string"
                }
            },
            "UserID": {
                "name": "userID",
                "in": "path",
                "description": "The ID of the User to act upon.",
                "required": true,
                "schema": {
                    "type": "string",
                    "format": "uuid"
                }
            },
            "UserIDEQ": {
                "name": "id.eq",
                "in": "query",
                "description": "Filters field \"id\" to be equal to the provided value.",
                "schema": {
                    "type": "string",
                    "format": "uuid"
                }
            },
            "UserIDIn": {
                "name": "id.in",
                "in": "query",
                "description": "Filters field \"id\" to be within the provided values.",
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "format": "uuid"
                    }
                }
            },
            "UserIDNEQ": {
                "name": "id.neq",
                "in": "query",
                "description": "Filters field \"id\" to be not equal to the provided value.",
                "schema": {
                    "type": "string",
                    "format": "uuid"
                }
            },
            "UserIDNotIn": {
                "name": "id.notIn",
                "in": "query",
                "description": "Filters field \"id\" to be not within the provided values.",
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "format": "uuid"
                    }
                }
            },
            "UserNameContains": {
                "name": "name.has",
                "in": "query",
                "description": "Filters field \"name\" to contain the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "UserNameContainsFold": {
                "name": "name.ihas",
                "in": "query",
                "description": "Filters field \"name\" to contain the provided value, case-insensitive.",
                "schema": {
                    "type": "string"
                }
            },
            "UserNameEQ": {
                "name": "name.eq",
                "in": "query",
                "description": "Filters field \"name\" to be equal to the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "UserNameEqualFold": {
                "name": "name.ieq",
                "in": "query",
                "description": "Filters field \"name\" to be equal to the provided value, case-insensitive.",
                "schema": {
                    "type": "string"
                }
            },
            "UserNameHasPrefix": {
                "name": "name.prefix",
                "in": "query",
                "description": "Filters field \"name\" to start with the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "UserNameHasSuffix": {
                "name": "name.suffix",
                "in": "query",
                "description": "Filters field \"name\" to end with the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "UserNameIn": {
                "name": "name.in",
                "in": "query",
                "description": "Filters field \"name\" to be within the provided values.",
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "UserNameNEQ": {
                "name": "name.neq",
                "in": "query",
                "description": "Filters field \"name\" to be not equal to the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "UserNameNotIn": {
                "name": "name.notIn",
                "in": "query",
                "description": "Filters field \"name\" to be not within the provided values.",
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "UserTypeEQ": {
                "name": "type.eq",
                "in": "query",
                "description": "Filters field \"type\" to be equal to the provided value.",
                "schema": {
                    "$ref": "#/components/schemas/UserTypeEnum"
                }
            },
            "UserTypeIn": {
                "name": "type.in",
                "in": "query",
                "description": "Filters field \"type\" to be within the provided values.",
                "schema": {
                    "type": "array",
                    "items": {
                        "$ref": "#/components/schemas/UserTypeEnum"
                    }
                }
            },
            "UserTypeNEQ": {
                "name": "type.neq",
                "in": "query",
                "description": "Filters field \"type\" to be not equal to the provided value.",
                "schema": {
                    "$ref": "#/components/schemas/UserTypeEnum"
                }
            },
            "UserTypeNotIn": {
                "name": "type.notIn",
                "in": "query",
                "description": "Filters field \"type\" to be not within the provided values.",
                "schema": {
                    "type": "array",
                    "items": {
                        "$ref": "#/components/schemas/UserTypeEnum"
                    }
                }
            },
            "UserUpdatedAtGT": {
                "name": "updatedAt.gt",
                "in": "query",
                "description": "Filters field \"updated_at\" to be greater than the provided value.",
                "schema": {
                    "type": "number",
                    "format": "date-time"
                }
            },
            "UserUpdatedAtLT": {
                "name": "updatedAt.lt",
                "in": "query",
                "description": "Filters field \"updated_at\" to be less than the provided value.",
                "schema": {
                    "type": "number",
                    "format": "date-time"
                }
            },
            "X-Request-Id": {
                "name": "X-Request-Id",
                "in": "header",
                "description": "A unique identifier for the request.",
                "schema": {
                    "type": "string"
                }
            }
        },
        "headers": {
            "X-Ratelimit-Limit": {
                "description": "The maximum number of requests that the consumer is permitted to make in a given period.",
                "required": true,
                "schema": {
                    "type": "integer"
                }
            },
            "X-Ratelimit-Remaining": {
                "description": "The number of requests remaining in the current rate limit window.",
                "required": true,
                "schema": {
                    "type": "integer"
                }
            },
            "X-Ratelimit-Reset": {
                "description": "The time at which the current rate limit window resets in UTC epoch seconds.",
                "required": true,
                "schema": {
                    "type": "integer"
                }
            }
        }
    },
    "tags": [
        {
            "name": "Meta",
            "description": "Includes various endpoints for meta information about the service, like the OpenAPI spec, version, health, etc."
        },
        {
            "name": "Categories"
        },
        {
            "name": "Pets"
        },
        {
            "name": "Follows"
        },
        {
            "name": "Friendships"
        },
        {
            "name": "Users"
        },
        {
            "name": "Settings",
            "description": "Settings contains the global settings for the platform. Generally only one should ever be returned."
        }
    ]
}
