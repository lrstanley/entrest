// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/lrstanley/entrest/_examples/kitchensink/internal/database/ent/pet"
	"github.com/lrstanley/entrest/_examples/kitchensink/internal/database/ent/user"
)

// Pet is the model entity for the Pet schema.
type Pet struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name"`
	// Nicknames holds the value of the "nicknames" field.
	Nicknames []string `json:"nicknames"`
	// Age holds the value of the "age" field.
	Age int `json:"age"`
	// Type holds the value of the "type" field.
	Type pet.Type `json:"type"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PetQuery when eager-loading is set.
	Edges        PetEdges `json:"edges"`
	user_pets    *uuid.UUID
	selectValues sql.SelectValues
}

// PetEdges holds the relations/edges for other nodes in the graph.
type PetEdges struct {
	// Categories that the pet belongs to.
	Categories []*Category `json:"categories,omitempty"`
	// The user that owns the pet.
	Owner *User `json:"owner,omitempty"`
	// Pets that this pet is friends with.
	Friends []*Pet `json:"friends,omitempty"`
	// Users that this pet is followed by.
	FollowedBy []*User `json:"followed_by,omitempty"`
	// Following holds the value of the following edge.
	Following []*Follows `json:"following,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [5]bool
}

// CategoriesOrErr returns the Categories value or an error if the edge
// was not loaded in eager-loading.
func (e PetEdges) CategoriesOrErr() ([]*Category, error) {
	if e.loadedTypes[0] {
		return e.Categories, nil
	}
	return nil, &NotLoadedError{edge: "categories"}
}

// OwnerOrErr returns the Owner value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PetEdges) OwnerOrErr() (*User, error) {
	if e.Owner != nil {
		return e.Owner, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "owner"}
}

// FriendsOrErr returns the Friends value or an error if the edge
// was not loaded in eager-loading.
func (e PetEdges) FriendsOrErr() ([]*Pet, error) {
	if e.loadedTypes[2] {
		return e.Friends, nil
	}
	return nil, &NotLoadedError{edge: "friends"}
}

// FollowedByOrErr returns the FollowedBy value or an error if the edge
// was not loaded in eager-loading.
func (e PetEdges) FollowedByOrErr() ([]*User, error) {
	if e.loadedTypes[3] {
		return e.FollowedBy, nil
	}
	return nil, &NotLoadedError{edge: "followed_by"}
}

// FollowingOrErr returns the Following value or an error if the edge
// was not loaded in eager-loading.
func (e PetEdges) FollowingOrErr() ([]*Follows, error) {
	if e.loadedTypes[4] {
		return e.Following, nil
	}
	return nil, &NotLoadedError{edge: "following"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Pet) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case pet.FieldNicknames:
			values[i] = new([]byte)
		case pet.FieldID, pet.FieldAge:
			values[i] = new(sql.NullInt64)
		case pet.FieldName, pet.FieldType:
			values[i] = new(sql.NullString)
		case pet.ForeignKeys[0]: // user_pets
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Pet fields.
func (pe *Pet) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case pet.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pe.ID = int(value.Int64)
		case pet.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				pe.Name = value.String
			}
		case pet.FieldNicknames:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field nicknames", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &pe.Nicknames); err != nil {
					return fmt.Errorf("unmarshal field nicknames: %w", err)
				}
			}
		case pet.FieldAge:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field age", values[i])
			} else if value.Valid {
				pe.Age = int(value.Int64)
			}
		case pet.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				pe.Type = pet.Type(value.String)
			}
		case pet.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field user_pets", values[i])
			} else if value.Valid {
				pe.user_pets = new(uuid.UUID)
				*pe.user_pets = *value.S.(*uuid.UUID)
			}
		default:
			pe.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Pet.
// This includes values selected through modifiers, order, etc.
func (pe *Pet) Value(name string) (ent.Value, error) {
	return pe.selectValues.Get(name)
}

// QueryCategories queries the "categories" edge of the Pet entity.
func (pe *Pet) QueryCategories() *CategoryQuery {
	return NewPetClient(pe.config).QueryCategories(pe)
}

// QueryOwner queries the "owner" edge of the Pet entity.
func (pe *Pet) QueryOwner() *UserQuery {
	return NewPetClient(pe.config).QueryOwner(pe)
}

// QueryFriends queries the "friends" edge of the Pet entity.
func (pe *Pet) QueryFriends() *PetQuery {
	return NewPetClient(pe.config).QueryFriends(pe)
}

// QueryFollowedBy queries the "followed_by" edge of the Pet entity.
func (pe *Pet) QueryFollowedBy() *UserQuery {
	return NewPetClient(pe.config).QueryFollowedBy(pe)
}

// QueryFollowing queries the "following" edge of the Pet entity.
func (pe *Pet) QueryFollowing() *FollowsQuery {
	return NewPetClient(pe.config).QueryFollowing(pe)
}

// Update returns a builder for updating this Pet.
// Note that you need to call Pet.Unwrap() before calling this method if this Pet
// was returned from a transaction, and the transaction was committed or rolled back.
func (pe *Pet) Update() *PetUpdateOne {
	return NewPetClient(pe.config).UpdateOne(pe)
}

// Unwrap unwraps the Pet entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pe *Pet) Unwrap() *Pet {
	_tx, ok := pe.config.driver.(*txDriver)
	if !ok {
		panic("ent: Pet is not a transactional entity")
	}
	pe.config.driver = _tx.drv
	return pe
}

// String implements the fmt.Stringer.
func (pe *Pet) String() string {
	var builder strings.Builder
	builder.WriteString("Pet(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pe.ID))
	builder.WriteString("name=")
	builder.WriteString(pe.Name)
	builder.WriteString(", ")
	builder.WriteString("nicknames=")
	builder.WriteString(fmt.Sprintf("%v", pe.Nicknames))
	builder.WriteString(", ")
	builder.WriteString("age=")
	builder.WriteString(fmt.Sprintf("%v", pe.Age))
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(fmt.Sprintf("%v", pe.Type))
	builder.WriteByte(')')
	return builder.String()
}

// Pets is a parsable slice of Pet.
type Pets []*Pet
