// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/lrstanley/entrest/_examples/kitchensink/internal/database/ent/follows"
	"github.com/lrstanley/entrest/_examples/kitchensink/internal/database/ent/pet"
	"github.com/lrstanley/entrest/_examples/kitchensink/internal/database/ent/user"
)

// FollowsCreate is the builder for creating a Follows entity.
type FollowsCreate struct {
	config
	mutation *FollowsMutation
	hooks    []Hook
}

// SetFollowedAt sets the "followed_at" field.
func (fc *FollowsCreate) SetFollowedAt(t time.Time) *FollowsCreate {
	fc.mutation.SetFollowedAt(t)
	return fc
}

// SetNillableFollowedAt sets the "followed_at" field if the given value is not nil.
func (fc *FollowsCreate) SetNillableFollowedAt(t *time.Time) *FollowsCreate {
	if t != nil {
		fc.SetFollowedAt(*t)
	}
	return fc
}

// SetUserID sets the "user_id" field.
func (fc *FollowsCreate) SetUserID(u uuid.UUID) *FollowsCreate {
	fc.mutation.SetUserID(u)
	return fc
}

// SetPetID sets the "pet_id" field.
func (fc *FollowsCreate) SetPetID(i int) *FollowsCreate {
	fc.mutation.SetPetID(i)
	return fc
}

// SetUser sets the "user" edge to the User entity.
func (fc *FollowsCreate) SetUser(u *User) *FollowsCreate {
	return fc.SetUserID(u.ID)
}

// SetPet sets the "pet" edge to the Pet entity.
func (fc *FollowsCreate) SetPet(p *Pet) *FollowsCreate {
	return fc.SetPetID(p.ID)
}

// Mutation returns the FollowsMutation object of the builder.
func (fc *FollowsCreate) Mutation() *FollowsMutation {
	return fc.mutation
}

// Save creates the Follows in the database.
func (fc *FollowsCreate) Save(ctx context.Context) (*Follows, error) {
	fc.defaults()
	return withHooks(ctx, fc.sqlSave, fc.mutation, fc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (fc *FollowsCreate) SaveX(ctx context.Context) *Follows {
	v, err := fc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fc *FollowsCreate) Exec(ctx context.Context) error {
	_, err := fc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fc *FollowsCreate) ExecX(ctx context.Context) {
	if err := fc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fc *FollowsCreate) defaults() {
	if _, ok := fc.mutation.FollowedAt(); !ok {
		v := follows.DefaultFollowedAt()
		fc.mutation.SetFollowedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fc *FollowsCreate) check() error {
	if _, ok := fc.mutation.FollowedAt(); !ok {
		return &ValidationError{Name: "followed_at", err: errors.New(`ent: missing required field "Follows.followed_at"`)}
	}
	if _, ok := fc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "Follows.user_id"`)}
	}
	if _, ok := fc.mutation.PetID(); !ok {
		return &ValidationError{Name: "pet_id", err: errors.New(`ent: missing required field "Follows.pet_id"`)}
	}
	if len(fc.mutation.UserIDs()) == 0 {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required edge "Follows.user"`)}
	}
	if len(fc.mutation.PetIDs()) == 0 {
		return &ValidationError{Name: "pet", err: errors.New(`ent: missing required edge "Follows.pet"`)}
	}
	return nil
}

func (fc *FollowsCreate) sqlSave(ctx context.Context) (*Follows, error) {
	if err := fc.check(); err != nil {
		return nil, err
	}
	_node, _spec := fc.createSpec()
	if err := sqlgraph.CreateNode(ctx, fc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}

func (fc *FollowsCreate) createSpec() (*Follows, *sqlgraph.CreateSpec) {
	var (
		_node = &Follows{config: fc.config}
		_spec = sqlgraph.NewCreateSpec(follows.Table, nil)
	)
	if value, ok := fc.mutation.FollowedAt(); ok {
		_spec.SetField(follows.FieldFollowedAt, field.TypeTime, value)
		_node.FollowedAt = value
	}
	if nodes := fc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   follows.UserTable,
			Columns: []string{follows.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := fc.mutation.PetIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   follows.PetTable,
			Columns: []string{follows.PetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pet.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.PetID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// FollowsCreateBulk is the builder for creating many Follows entities in bulk.
type FollowsCreateBulk struct {
	config
	err      error
	builders []*FollowsCreate
}

// Save creates the Follows entities in the database.
func (fcb *FollowsCreateBulk) Save(ctx context.Context) ([]*Follows, error) {
	if fcb.err != nil {
		return nil, fcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(fcb.builders))
	nodes := make([]*Follows, len(fcb.builders))
	mutators := make([]Mutator, len(fcb.builders))
	for i := range fcb.builders {
		func(i int, root context.Context) {
			builder := fcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*FollowsMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, fcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, fcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, fcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (fcb *FollowsCreateBulk) SaveX(ctx context.Context) []*Follows {
	v, err := fcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fcb *FollowsCreateBulk) Exec(ctx context.Context) error {
	_, err := fcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fcb *FollowsCreateBulk) ExecX(ctx context.Context) {
	if err := fcb.Exec(ctx); err != nil {
		panic(err)
	}
}
