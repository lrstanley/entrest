{{- /*
  Copyright (c) Liam Stanley <liam@liam.sh>. All rights reserved. Use of
  this source code is governed by the MIT license that can be found in
  the LICENSE file.
*/ -}}
{{- define "helper/rest/server/errors" }}
    // ErrorResponse is the response structure for errors.
    type ErrorResponse struct {
        Error string     `json:"error"`                // The underlying error, which may be masked when debugging is disabled.
        Type  string     `json:"type"`                 // A summary of the error code based off the HTTP status code or application error code.
        Code  int        `json:"code"`                 // The HTTP status code or other internal application error code.
        RequestID string `json:"request_id,omitempty"` // The unique request ID for this error.
        Timestamp string `json:"timestamp,omitempty"`  // The timestamp of the error, in RFC3339 format.
    }

    type ErrBadRequest struct {
        Err error
    }

    func (e ErrBadRequest) Error() string {
        return fmt.Sprintf("bad request: %s", e.Err)
    }

    func (e ErrBadRequest) Unwrap() error {
        return e.Err
    }

    // IsBadRequest returns true if the unwrapped/underlying error is of type ErrBadRequest.
    func IsBadRequest(err error) bool {
        var target *ErrBadRequest
        return errors.As(err, &target)
    }

    var ErrEndpointNotFound = errors.New("endpoint not found")

    // IsEndpointNotFound returns true if the unwrapped/underlying error is of type ErrEndpointNotFound.
    func IsEndpointNotFound(err error) bool {
        return errors.Is(err, ErrEndpointNotFound)
    }

    var ErrMethodNotAllowed = errors.New("method not allowed")

    // IsMethodNotAllowed returns true if the unwrapped/underlying error is of type ErrMethodNotAllowed.
    func IsMethodNotAllowed(err error) bool {
        return errors.Is(err, ErrMethodNotAllowed)
    }

    type ErrInvalidID struct {
        ID string
        Err error
    }

    func (e ErrInvalidID) Error() string {
        return fmt.Sprintf("invalid ID provided: %q: %v", e.ID, e.Err)
    }

    func (e ErrInvalidID) Unwrap() error {
        return e.Err
    }

    // IsInvalidID returns true if the unwrapped/underlying error is of type ErrInvalidID.
    func IsInvalidID(err error) bool {
        var target *ErrInvalidID
	    return errors.As(err, &target)
    }
{{- end }}{{/* end template */}}
