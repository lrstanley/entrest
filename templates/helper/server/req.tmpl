{{- /*
  Copyright (c) Liam Stanley <liam@liam.sh>. All rights reserved. Use of
  this source code is governed by the MIT license that can be found in
  the LICENSE file.
*/ -}}
{{- define "helper/rest/server/req" -}}
    // Req simplifies making an HTTP handler that returns a single result, and an error.
    // The result, if not nil, must be JSON-marshalable. If result is nil, [http.StatusNoContent]
    // will be returned.
    func Req[Resp any](s *Server, op Operation, fn func(*http.Request) (*Resp, error)) http.HandlerFunc {
        return func(w http.ResponseWriter, r *http.Request) {
            results, err := fn(r)
            handleResponse(s, w, r, op, results, err)
        }
    }

    // resolveID resolves the ID from the request path, and unmarshals it into the provided type.
    // Only supports string, int, and types that support UnmarshalText, UnmarshalJSON, or UnmarshalBinary
    // (in that order).
    func resolveID[T any](r *http.Request) (id T, err error) {
        value := r.PathValue("id")

        switch any(id).(type) {
        case string:
            id = any(value).(T)
        case int:
            rid, err := strconv.Atoi(value)
            if err == nil {
                id = any(rid).(T)
            }
        default:
            hasUnmarshal := false

            // Check if the underlying type supports UnmarshalText, UnmarshalJSON, or UnmarshalBinary.
            if u, ok := any(&id).(encoding.TextUnmarshaler); ok {
                hasUnmarshal = true
                err = u.UnmarshalText([]byte(value))
            } else if u, ok := any(&id).(json.Unmarshaler); ok {
                hasUnmarshal = true
                err = u.UnmarshalJSON([]byte(value))
            } else if u, ok := any(&id).(encoding.BinaryUnmarshaler); ok {
                hasUnmarshal = true
                err = u.UnmarshalBinary([]byte(value))
            }

            if !hasUnmarshal {
                panic(fmt.Sprintf("unsupported ID type (cannot unmarshal): %T", id))
            }
        }

        if err != nil {
            return id, &ErrInvalidID{ID: value, Err: err}
        }
        return id, nil
    }

    // ReqID is similar to Req, but also processes an "id" path parameter and provides it to the
    // handler function.
    func ReqID[Resp, I any](s *Server, op Operation, fn func(*http.Request, I) (*Resp, error)) http.HandlerFunc {
        return func(w http.ResponseWriter, r *http.Request) {
            id, err := resolveID[I](r)
            if err != nil {
                handleResponse[Resp](s, w, r, op, nil, err)
                return
            }
            results, err := fn(r, id)
            handleResponse(s, w, r, op, results, err)
        }
    }

    // ReqParam is similar to Req, but also processes a request body/query params and provides it
    // to the handler function.
    func ReqParam[Params, Resp any](s *Server, op Operation, fn func(*http.Request, *Params) (*Resp, error)) http.HandlerFunc {
        return func(w http.ResponseWriter, r *http.Request) {
            params := new(Params)
            if err := Bind(r, params); err != nil {
                handleResponse[Resp](s, w, r, op, nil, err)
                return
            }
            results, err := fn(r, params)
            handleResponse(s, w, r, op, results, err)
        }
    }

    // ReqIDParam is similar to ReqParam, but also processes an "id" path parameter and request
    // body/query params, and provides it to the handler function.
    func ReqIDParam[Params, Resp, I any](s *Server, op Operation, fn func(*http.Request, I, *Params) (*Resp, error)) http.HandlerFunc {
        return func(w http.ResponseWriter, r *http.Request) {
            id, err := resolveID[I](r)
            if err != nil {
                handleResponse[Resp](s, w, r, op, nil, err)
                return
            }
            params := new(Params)
            err = Bind(r, params)
            if err != nil {
                handleResponse[Resp](s, w, r, op, nil, err)
                return
            }
            results, err := fn(r, id, params)
            handleResponse(s, w, r, op, results, err)
        }
    }
{{- end }}{{/* end template */}}
